'use strict';

var _support = require('../support');

var _syntax = require('@glimmer/syntax');

QUnit.module('[glimmer-syntax] Traversal - manipulating');
['enter', 'exit'].forEach(eventName => {
    QUnit.test(`[${eventName}] Replacing self in a key (returning null)`, assert => {
        let ast = (0, _syntax.preprocess)(`<x y={{z}} />`);
        let el = ast.body[0];
        let attr = el.attributes[0];
        assert.throws(() => {
            (0, _syntax.traverse)(ast, {
                MustacheStatement: {
                    [eventName]: node => {
                        if (node.path.type === 'PathExpression' && node.path.parts[0] === 'z') {
                            return null;
                        }
                        return;
                    }
                }
            });
        }, (0, _syntax.cannotRemoveNode)(attr.value, attr, 'value'));
    });
    QUnit.test(`[${eventName}] Replacing self in a key (returning an empty array)`, assert => {
        let ast = (0, _syntax.preprocess)(`<x y={{z}} />`);
        let el = ast.body[0];
        let attr = el.attributes[0];
        assert.throws(() => {
            (0, _syntax.traverse)(ast, {
                MustacheStatement: {
                    [eventName](node) {
                        if (node.path.type === 'PathExpression' && node.path.parts[0] === 'z') {
                            return [];
                        }
                        return;
                    }
                }
            });
        }, (0, _syntax.cannotRemoveNode)(attr.value, attr, 'value'));
    });
    QUnit.test(`[${eventName}] Replacing self in a key (returning a node)`, () => {
        let ast = (0, _syntax.preprocess)(`<x y={{z}} />`);
        (0, _syntax.traverse)(ast, {
            MustacheStatement: {
                [eventName](node) {
                    if (node.path.type === 'PathExpression' && node.path.parts[0] === 'z') {
                        return _syntax.builders.mustache('a');
                    }
                    return;
                }
            }
        });
        (0, _support.astEqual)(ast, `<x y={{a}} />`);
    });
    QUnit.test(`[${eventName}] Replacing self in a key (returning an array with a single node)`, () => {
        let ast = (0, _syntax.preprocess)(`<x y={{z}} />`);
        (0, _syntax.traverse)(ast, {
            MustacheStatement: {
                [eventName](node) {
                    if (node.path.type === 'PathExpression' && node.path.parts[0] === 'z') {
                        return [_syntax.builders.mustache('a')];
                    }
                    return;
                }
            }
        });
        (0, _support.astEqual)(ast, `<x y={{a}} />`);
    });
    QUnit.test(`[${eventName}] Replacing self in a key (returning an array with multiple nodes)`, assert => {
        let ast = (0, _syntax.preprocess)(`<x y={{z}} />`);
        let el = ast.body[0];
        let attr = el.attributes[0];
        assert.throws(() => {
            (0, _syntax.traverse)(ast, {
                MustacheStatement: {
                    [eventName](node) {
                        if (node.path.type === 'PathExpression' && node.path.parts[0] === 'z') {
                            return [_syntax.builders.mustache('a'), _syntax.builders.mustache('b'), _syntax.builders.mustache('c')];
                        }
                        return;
                    }
                }
            });
        }, (0, _syntax.cannotReplaceNode)(attr.value, attr, 'value'));
    });
    QUnit.test(`[${eventName}] Replacing self in an array (returning null)`, () => {
        let ast = (0, _syntax.preprocess)(`{{x}}{{y}}{{z}}`);
        (0, _syntax.traverse)(ast, {
            MustacheStatement: {
                [eventName](node) {
                    if (node.path.type === 'PathExpression' && node.path.parts[0] === 'y') {
                        return null;
                    }
                    return;
                }
            }
        });
        (0, _support.astEqual)(ast, `{{x}}{{z}}`);
    });
    QUnit.test(`[${eventName}] Replacing self in an array (returning an empty array)`, () => {
        let ast = (0, _syntax.preprocess)(`{{x}}{{y}}{{z}}`);
        (0, _syntax.traverse)(ast, {
            MustacheStatement: {
                [eventName](node) {
                    if (node.path.type === 'PathExpression' && node.path.parts[0] === 'y') {
                        return [];
                    }
                    return;
                }
            }
        });
        (0, _support.astEqual)(ast, `{{x}}{{z}}`);
    });
    QUnit.test(`[${eventName}] Replacing self in an array (returning a node)`, () => {
        let ast = (0, _syntax.preprocess)(`{{x}}{{y}}{{z}}`);
        (0, _syntax.traverse)(ast, {
            MustacheStatement: {
                [eventName](node) {
                    if (node.path.type === 'PathExpression' && node.path.parts[0] === 'y') {
                        return _syntax.builders.mustache('a');
                    }
                    return;
                }
            }
        });
        (0, _support.astEqual)(ast, `{{x}}{{a}}{{z}}`);
    });
    QUnit.test(`[${eventName}] Replacing self in an array (returning an array with a single node)`, () => {
        let ast = (0, _syntax.preprocess)(`{{x}}{{y}}{{z}}`);
        (0, _syntax.traverse)(ast, {
            MustacheStatement: {
                [eventName](node) {
                    if (node.path.type === 'PathExpression' && node.path.parts[0] === 'y') {
                        return [_syntax.builders.mustache('a')];
                    }
                    return;
                }
            }
        });
        (0, _support.astEqual)(ast, `{{x}}{{a}}{{z}}`);
    });
    QUnit.test(`[${eventName}] Replacing self in an array (returning an array with multiple nodes)`, () => {
        let ast = (0, _syntax.preprocess)(`{{x}}{{y}}{{z}}`);
        (0, _syntax.traverse)(ast, {
            MustacheStatement: {
                [eventName](node) {
                    if (node.path.type === 'PathExpression' && node.path.parts[0] === 'y') {
                        return [_syntax.builders.mustache('a'), _syntax.builders.mustache('b'), _syntax.builders.mustache('c')];
                    }
                    return;
                }
            }
        });
        (0, _support.astEqual)(ast, `{{x}}{{a}}{{b}}{{c}}{{z}}`);
    });
});
QUnit.module('[glimmer-syntax] Traversal - manipulating (edge cases)');
QUnit.test('Inside of a block', () => {
    let ast = (0, _syntax.preprocess)(`{{y}}{{#w}}{{x}}{{y}}{{z}}{{/w}}`);
    (0, _syntax.traverse)(ast, {
        MustacheStatement(node) {
            if (node.path.type === 'PathExpression' && node.path.parts[0] === 'y') {
                return [_syntax.builders.mustache('a'), _syntax.builders.mustache('b'), _syntax.builders.mustache('c')];
            }
            return;
        }
    });
    (0, _support.astEqual)(ast, `{{a}}{{b}}{{c}}{{#w}}{{x}}{{a}}{{b}}{{c}}{{z}}{{/w}}`);
});
QUnit.test('Should recurrsively walk the transformed node', () => {
    let ast = (0, _syntax.preprocess)(`{{x}}{{y}}{{z}}`);
    (0, _syntax.traverse)(ast, {
        MustacheStatement(node) {
            if (node.path.original === 'x') {
                return _syntax.builders.mustache('y');
            } else if (node.path.original === 'y') {
                return _syntax.builders.mustache('z');
            }
            return;
        }
    });
    (0, _support.astEqual)(ast, `{{z}}{{z}}{{z}}`);
});
QUnit.test('Should recurrsively walk the keys in the transformed node', () => {
    let ast = (0, _syntax.preprocess)(`{{#foo}}{{#bar}}{{baz}}{{/bar}}{{else}}{{#bar}}{{bat}}{{/bar}}{{/foo}}`);
    (0, _syntax.traverse)(ast, {
        BlockStatement(node) {
            if (node.path.original === 'foo') {
                return _syntax.builders.block(_syntax.builders.path('x-foo'), node.params, node.hash, node.program, node.inverse, node.loc);
            } else if (node.path.original === 'bar') {
                return _syntax.builders.block(_syntax.builders.path('x-bar'), node.params, node.hash, node.program, node.inverse, node.loc);
            }
            return;
        },
        MustacheStatement: function (node) {
            if (node.path.original === 'baz') {
                return _syntax.builders.mustache('x-baz');
            } else if (node.path.original === 'bat') {
                return _syntax.builders.mustache('x-bat');
            }
            return;
        }
    });
    (0, _support.astEqual)(ast, `{{#x-foo}}{{#x-bar}}{{x-baz}}{{/x-bar}}{{else}}{{#x-bar}}{{x-bat}}{{/x-bar}}{{/x-foo}}`);
});
QUnit.test('Exit event is not triggered if the node is replaced during the enter event', assert => {
    let ast = (0, _syntax.preprocess)(`{{x}}`);
    let entered = [];
    let exited = [];
    (0, _syntax.traverse)(ast, {
        MustacheStatement: {
            enter(node) {
                entered.push(node.path.original);
                return _syntax.builders.mustache('y');
            },
            exit(node) {
                exited.push(node.path.original);
            }
        }
    });
    assert.deepEqual(entered, ['x', 'y']);
    assert.deepEqual(exited, ['y']);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,