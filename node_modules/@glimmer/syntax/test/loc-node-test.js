'use strict';

var _ = require('..');

QUnit.module('[glimmer-syntax] Parser - Location Info');
function assertNodeType(node, type) {
    let nodeType = node && node.type;
    QUnit.assert.pushResult({
        result: nodeType === type,
        actual: nodeType,
        expected: type,
        message: `expected node type to be ${node} but was ${nodeType}`
    });
    return nodeType === type;
}
const { test } = QUnit;
function locEqual(node, startLine, startColumn, endLine, endColumn, message = JSON.stringify(node)) {
    let expected = {
        source: null,
        start: { line: startLine, column: startColumn },
        end: { line: endLine, column: endColumn }
    };
    QUnit.assert.deepEqual(node && node.loc, expected, message);
}
test('programs', () => {
    let ast = (0, _.preprocess)(`
  {{#if foo}}
    {{bar}}
       {{/if}}
    `);
    locEqual(ast, 1, 0, 5, 4, 'outer program');
    let statement = ast.body[1];
    if (assertNodeType(statement, 'BlockStatement')) {
        locEqual(statement.program, 2, 13, 4, 7, 'nested program');
    }
});
test('blocks', function () {
    let ast = (0, _.preprocess)(`
  {{#if foo}}
    {{#if bar}}
        test
        {{else}}
      test
  {{/if    }}
       {{/if
      }}
    `);
    let [, block] = ast.body;
    let [nestedBlock] = block.program.body;
    let [nestedBlockText] = nestedBlock.program.body;
    let nestedInverse = nestedBlock.inverse;
    locEqual(block, 2, 2, 9, 8, 'outer block');
    locEqual(nestedBlock, 3, 4, 7, 13, 'nested block');
    locEqual(nestedBlockText, 4, 0, 5, 0);
    locEqual(nestedInverse, 5, 16, 7, 2);
});
test('mustache', function () {
    let ast = (0, _.preprocess)(`
    {{foo}}
    {{#if foo}}
      bar: {{bar
        }}
    {{/if}}
  `);
    let [, foo,, innerBlock] = ast.body;
    if (assertNodeType(innerBlock, 'BlockStatement')) {
        let [barText, bar] = innerBlock.program.body;
        locEqual(foo, 2, 4, 2, 11, 'outer mustache');
        locEqual(barText, 4, 0, 4, 11);
        locEqual(bar, 4, 11, 5, 10, 'inner mustache');
    }
});
test('element modifier', function () {
    let ast = (0, _.preprocess)(`
    <div {{bind-attr
      foo
      bar=wat}}></div>
  `);
    let el = ast.body[1];
    if (assertNodeType(el, 'ElementNode')) {
        locEqual(el.modifiers[0], 2, 9, 4, 15, 'element modifier');
    }
});
test('html elements', function () {
    let ast = (0, _.preprocess)(`
    <section>
      <br>
      <div>
        <hr />
      </div>
    </section>
  `);
    let [, section] = ast.body;
    locEqual(section, 2, 4, 7, 14, 'section element');
    if (assertNodeType(section, 'ElementNode')) {
        let [, br,, div] = section.children;
        locEqual(br, 3, 6, 3, 10, 'br element');
        locEqual(div, 4, 6, 6, 12, 'div element');
        if (assertNodeType(div, 'ElementNode')) {
            let [, hr] = div.children;
            locEqual(hr, 5, 8, 5, 14, 'hr element');
        }
    }
});
test('html elements with nested blocks', assert => {
    let ast = (0, _.preprocess)(`
    <div>
      {{#if isSingleError}}
        Single error here!
      {{else if errors}}
        Multiple errors here!
      {{else}}
        No errors found!
      {{/if}} <p>Hi there!</p>
    </div>
  `);
    let [, div] = ast.body;
    locEqual(div, 2, 4, 10, 10, 'div element');
    if (assertNodeType(div, 'ElementNode')) {
        let [, ifBlock,, p] = div.children;
        locEqual(ifBlock, 3, 6, 9, 13, 'outer if block');
        locEqual(p, 9, 14, 9, 30, 'p');
        if (assertNodeType(ifBlock, 'BlockStatement')) {
            let inverseBlock = ifBlock.inverse;
            locEqual(inverseBlock, 5, 24, 7, 6, 'inverse block');
            assert.ok(inverseBlock, 'has inverse block');
            if (inverseBlock) {
                let [nestedIfBlock] = inverseBlock.body;
                locEqual(nestedIfBlock, 5, 6, 9, 6, 'nested if block');
                if (assertNodeType(nestedIfBlock, 'BlockStatement')) {
                    let nestedIfInverseBlock = nestedIfBlock.inverse;
                    assert.ok(nestedIfInverseBlock, 'has nested inverse block');
                    if (nestedIfInverseBlock) {
                        locEqual(nestedIfInverseBlock, 7, 14, 9, 6, 'nested inverse block');
                    }
                }
            }
        }
    }
});
test('block + newline + element ', function () {
    let ast = (0, _.preprocess)(`
    {{#if stuff}}
    {{/if}}
    <p>Hi!</p>
  `);
    let [, ifBlock,, p] = ast.body;
    locEqual(ifBlock, 2, 4, 3, 11, 'if block');
    locEqual(p, 4, 4, 4, 14, 'p element');
});
test('mustache + newline + element ', function () {
    let ast = (0, _.preprocess)(`
    {{foo}}
    <p>Hi!</p>
  `);
    let [, fooMustache,, p] = ast.body;
    locEqual(fooMustache, 2, 4, 2, 11, 'if block');
    locEqual(p, 3, 4, 3, 14, 'p element');
});
test('blocks with nested html elements', function () {
    let ast = (0, _.preprocess)(`
    {{#foo-bar}}<div>Foo</div>{{/foo-bar}} <p>Hi!</p>
  `);
    let block = ast.body[1];
    if (assertNodeType(block, 'BlockStatement')) {
        let [div] = block.program.body;
        locEqual(div, 2, 16, 2, 30, 'div element');
    }
    let p = ast.body[3];
    locEqual(p, 2, 43, 2, 53, 'p element');
});
test('html elements after mustache', function () {
    let ast = (0, _.preprocess)(`
    {{foo-bar}} <p>Hi!</p>
  `);
    let [, mustache,, p] = ast.body;
    locEqual(mustache, 2, 4, 2, 15, '{{foo-bar}}');
    locEqual(p, 2, 16, 2, 26, 'div element');
});
test('text', function () {
    let ast = (0, _.preprocess)(`
    foo!
    <div>blah</div>
  `);
    let [fooText, div] = ast.body;
    locEqual(fooText, 1, 0, 3, 4);
    if (assertNodeType(div, 'ElementNode')) {
        let [blahText] = div.children;
        locEqual(blahText, 3, 9, 3, 13);
    }
});
test('comment', function () {
    let ast = (0, _.preprocess)(`
    <div><!-- blah blah blah blah -->
      <!-- derp herky --><div></div>
    </div>
  `);
    let [, div] = ast.body;
    if (assertNodeType(div, 'ElementNode')) {
        let [comment1,, comment2, trailingDiv] = div.children;
        locEqual(comment1, 2, 9, 2, 37);
        locEqual(comment2, 3, 6, 3, 25);
        locEqual(trailingDiv, 3, 25, 3, 36);
    }
});
test('handlebars comment', function () {
    let ast = (0, _.preprocess)(`
    <div>{{!-- blah blah blah blah --}}
      {{!-- derp herky --}}<div></div>
    </div>
    <span {{! derpy }}></span>
  `);
    let [, div,, span] = ast.body;
    if (assertNodeType(div, 'ElementNode')) {
        let [comment1,, comment2, trailingDiv] = div.children;
        locEqual(comment1, 2, 9, 2, 39);
        locEqual(comment2, 3, 6, 3, 27);
        locEqual(trailingDiv, 3, 27, 3, 38);
        if (assertNodeType(span, 'ElementNode')) {
            let [comment3] = span.comments;
            locEqual(span, 5, 4, 5, 30);
            locEqual(comment3, 5, 10, 5, 22);
        }
    }
});
test('element attribute', function () {
    let ast = (0, _.preprocess)(`
    <div data-foo="blah"
      data-derp="lolol"
data-barf="herpy"
  data-qux=lolnoquotes
        data-something-boolean
    data-hurky="some {{thing}} here">
      Hi, fivetanley!
    </div>
  `);
    let [, div] = ast.body;
    if (assertNodeType(div, 'ElementNode')) {
        let [dataFoo, dataDerp, dataBarf, dataQux, dataSomethingBoolean, dataHurky] = div.attributes;
        locEqual(dataFoo, 2, 9, 2, 24, 'data-foo');
        locEqual(dataDerp, 3, 6, 3, 23, 'data-derp');
        locEqual(dataBarf, 4, 0, 4, 17, 'data-barf');
        locEqual(dataQux, 5, 2, 5, 22, 'data-qux');
        locEqual(dataSomethingBoolean, 6, 8, 7, 4, 'data-something-boolean');
        locEqual(dataFoo.value, 2, 18, 2, 24, 'data-foo value');
        locEqual(dataDerp.value, 3, 16, 3, 23, 'data-derp value');
        locEqual(dataBarf.value, 4, 10, 4, 17, 'data-barf value');
        locEqual(dataQux.value, 5, 11, 5, 22, 'data-qux value');
        locEqual(dataHurky.value, 7, 15, 7, 36, 'data-hurky value');
    }
});
test('element dynamic attribute', function () {
    let ast = (0, _.preprocess)(`<img src={{blah}}>`);
    let [img] = ast.body;
    if (assertNodeType(img, 'ElementNode')) {
        let [src] = img.attributes;
        locEqual(src, 1, 5, 1, 17);
        let { value } = src;
        locEqual(value, 1, 9, 1, 17);
    }
});
test('concat statement', function () {
    let ast = (0, _.preprocess)(`
    <div data-foo="{{if foo
        "active"
    "inactive"
  }}
derp"
  data-bar="
foo"
  data-derp="foo
{{concat ''}}
    huzzah"
    ></div>
  `);
    let [, div] = ast.body;
    if (assertNodeType(div, 'ElementNode')) {
        let [dataFoo, dataBar, dataDerp] = div.attributes;
        let dataFooValue = dataFoo.value;
        let dataBarValue = dataBar.value;
        let dataDerpValue = dataDerp.value;
        locEqual(dataFoo, 2, 9, 6, 5);
        locEqual(dataBar, 7, 2, 8, 4);
        locEqual(dataBarValue, 7, 11, 8, 4);
        locEqual(dataDerpValue, 9, 12, 11, 11);
        locEqual(dataFooValue, 2, 18, 6, 5);
        if (assertNodeType(dataFooValue, 'ConcatStatement')) {
            let [inlineIf, staticDerpText] = dataFooValue.parts;
            locEqual(inlineIf, 2, 19, 5, 4);
            locEqual(staticDerpText, 5, 4, 6, 4);
        }
        if (assertNodeType(dataDerpValue, 'ConcatStatement')) {
            let [fooStaticText, concat, huzzahStaticText] = dataDerpValue.parts;
            locEqual(fooStaticText, 9, 14, 10, 0);
            locEqual(concat, 10, 0, 10, 13);
            locEqual(huzzahStaticText, 10, 13, 11, 10);
        }
    }
});
test('char references', function () {
    let ast = (0, _.preprocess)(`
    &gt;<div>&lt;<p>
      Hi, danmcclain &excl;</p>
    </div>
  `);
    let [, div] = ast.body;
    locEqual(div, 2, 8, 4, 10);
    if (assertNodeType(div, 'ElementNode')) {
        let [text1, p] = div.children;
        locEqual(text1, 2, 13, 2, 17);
        locEqual(p, 2, 17, 3, 31);
        if (assertNodeType(p, 'ElementNode')) {
            let [text2] = p.children;
            locEqual(text2, 2, 20, 3, 27);
        }
    }
});
test('whitespace control - trailing', function () {
    let ast = (0, _.preprocess)(`
  {{#if foo~}}
    <div></div>
  {{else~}}
    {{bar}}
  {{/if}}`);
    let [, ifBlock] = ast.body;
    locEqual(ifBlock, 2, 2, 6, 9, 'if block');
    if (assertNodeType(ifBlock, 'BlockStatement')) {
        let [div] = ifBlock.program.body;
        locEqual(div, 3, 4, 3, 15, 'div inside truthy if block');
    }
});
test("whitespace control - 'else if' trailing", function () {
    let ast = (0, _.preprocess)(`
  {{#if foo}}
    {{bar}}
  {{else if baz~}}
    <div></div>
  {{/if}}`);
    let [, ifBlock] = ast.body;
    locEqual(ifBlock, 2, 2, 6, 9, 'if block');
    if (assertNodeType(ifBlock, 'BlockStatement') && assertNodeType(ifBlock.inverse, 'Block')) {
        let [nestedIfBlock] = ifBlock.inverse.body;
        if (assertNodeType(nestedIfBlock, 'BlockStatement') && assertNodeType(nestedIfBlock.program, 'Block')) {
            let [div] = nestedIfBlock.program.body;
            locEqual(div, 5, 4, 5, 15, 'div inside truthy else if block');
        }
    }
});
test('whitespace control - leading', function () {
    let ast = (0, _.preprocess)(`
  {{~#if foo}}
    <div></div>
  {{~else}}
    {{bar}}
  {{~/if}}`);
    let [ifBlock] = ast.body;
    locEqual(ifBlock, 2, 2, 6, 10, 'if block');
    if (assertNodeType(ifBlock, 'BlockStatement')) {
        let [, div] = ifBlock.program.body;
        locEqual(div, 3, 4, 3, 15, 'div inside truthy if block');
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC90ZXN0L2xvYy1ub2RlLXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE1BQU0sTUFBTixDQUFhLHlDQUFiO0FBRUEsU0FBUyxjQUFULENBQ0UsSUFERixFQUVFLElBRkYsRUFFUztBQUVQLFFBQUksV0FBVyxRQUFRLEtBQUssSUFBNUI7QUFDQSxVQUFNLE1BQU4sQ0FBYSxVQUFiLENBQXdCO0FBQ3RCLGdCQUFRLGFBQWEsSUFEQztBQUV0QixnQkFBUSxRQUZjO0FBR3RCLGtCQUFVLElBSFk7QUFJdEIsaUJBQVMsNEJBQTRCLElBQUksWUFBWSxRQUFRO0FBSnZDLEtBQXhCO0FBTUEsV0FBTyxhQUFhLElBQXBCO0FBQ0Q7QUFFRCxNQUFNLEVBQUUsSUFBRixLQUFXLEtBQWpCO0FBRUEsU0FBUyxRQUFULENBQ0UsSUFERixFQUVFLFNBRkYsRUFHRSxXQUhGLEVBSUUsT0FKRixFQUtFLFNBTEYsRUFNRSxVQUFVLEtBQUssU0FBTCxDQUFlLElBQWYsQ0FOWixFQU1nQztBQUU5QixRQUFJLFdBQVc7QUFDYixnQkFBUSxJQURLO0FBRWIsZUFBTyxFQUFFLE1BQU0sU0FBUixFQUFtQixRQUFRLFdBQTNCLEVBRk07QUFHYixhQUFLLEVBQUUsTUFBTSxPQUFSLEVBQWlCLFFBQVEsU0FBekI7QUFIUSxLQUFmO0FBTUEsVUFBTSxNQUFOLENBQWEsU0FBYixDQUF1QixRQUFRLEtBQUssR0FBcEMsRUFBeUMsUUFBekMsRUFBbUQsT0FBbkQ7QUFDRDtBQUVELEtBQUssVUFBTCxFQUFpQixNQUFLO0FBQ3BCLFFBQUksTUFBTSxrQkFBTTs7OztLQUFOLENBQVY7QUFNQSxhQUFTLEdBQVQsRUFBYyxDQUFkLEVBQWlCLENBQWpCLEVBQW9CLENBQXBCLEVBQXVCLENBQXZCLEVBQTBCLGVBQTFCO0FBQ0EsUUFBSSxZQUFZLElBQUksSUFBSixDQUFTLENBQVQsQ0FBaEI7QUFDQSxRQUFJLGVBQWUsU0FBZixFQUEwQixnQkFBMUIsQ0FBSixFQUFpRDtBQUMvQyxpQkFBUyxVQUFVLE9BQW5CLEVBQTRCLENBQTVCLEVBQStCLEVBQS9CLEVBQW1DLENBQW5DLEVBQXNDLENBQXRDLEVBQXlDLGdCQUF6QztBQUNEO0FBQ0YsQ0FaRDtBQWNBLEtBQUssUUFBTCxFQUFlLFlBQUE7QUFDYixRQUFJLE1BQU0sa0JBQU07Ozs7Ozs7OztLQUFOLENBQVY7QUFXQSxRQUFJLEdBQUcsS0FBSCxJQUFZLElBQUksSUFBcEI7QUFDQSxRQUFJLENBQUMsV0FBRCxJQUFnQixNQUFNLE9BQU4sQ0FBYyxJQUFsQztBQUNBLFFBQUksQ0FBQyxlQUFELElBQW9CLFlBQVksT0FBWixDQUFvQixJQUE1QztBQUNBLFFBQUksZ0JBQWdCLFlBQVksT0FBaEM7QUFFQSxhQUFTLEtBQVQsRUFBZ0IsQ0FBaEIsRUFBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBeUIsQ0FBekIsRUFBNEIsYUFBNUI7QUFDQSxhQUFTLFdBQVQsRUFBc0IsQ0FBdEIsRUFBeUIsQ0FBekIsRUFBNEIsQ0FBNUIsRUFBK0IsRUFBL0IsRUFBbUMsY0FBbkM7QUFDQSxhQUFTLGVBQVQsRUFBMEIsQ0FBMUIsRUFBNkIsQ0FBN0IsRUFBZ0MsQ0FBaEMsRUFBbUMsQ0FBbkM7QUFDQSxhQUFTLGFBQVQsRUFBb0MsQ0FBcEMsRUFBdUMsRUFBdkMsRUFBMkMsQ0FBM0MsRUFBOEMsQ0FBOUM7QUFDRCxDQXJCRDtBQXVCQSxLQUFLLFVBQUwsRUFBaUIsWUFBQTtBQUNmLFFBQUksTUFBTSxrQkFBTTs7Ozs7O0dBQU4sQ0FBVjtBQVFBLFFBQUksR0FBRyxHQUFILEdBQVUsVUFBVixJQUF3QixJQUFJLElBQWhDO0FBRUEsUUFBSSxlQUFlLFVBQWYsRUFBMkIsZ0JBQTNCLENBQUosRUFBa0Q7QUFDaEQsWUFBSSxDQUFDLE9BQUQsRUFBVSxHQUFWLElBQWlCLFdBQVcsT0FBWCxDQUFtQixJQUF4QztBQUVBLGlCQUFTLEdBQVQsRUFBYyxDQUFkLEVBQWlCLENBQWpCLEVBQW9CLENBQXBCLEVBQXVCLEVBQXZCLEVBQTJCLGdCQUEzQjtBQUNBLGlCQUFTLE9BQVQsRUFBa0IsQ0FBbEIsRUFBcUIsQ0FBckIsRUFBd0IsQ0FBeEIsRUFBMkIsRUFBM0I7QUFDQSxpQkFBUyxHQUFULEVBQWMsQ0FBZCxFQUFpQixFQUFqQixFQUFxQixDQUFyQixFQUF3QixFQUF4QixFQUE0QixnQkFBNUI7QUFDRDtBQUNGLENBbEJEO0FBb0JBLEtBQUssa0JBQUwsRUFBeUIsWUFBQTtBQUN2QixRQUFJLE1BQU0sa0JBQU07Ozs7R0FBTixDQUFWO0FBTUEsUUFBSSxLQUFLLElBQUksSUFBSixDQUFTLENBQVQsQ0FBVDtBQUNBLFFBQUksZUFBZSxFQUFmLEVBQW1CLGFBQW5CLENBQUosRUFBdUM7QUFDckMsaUJBQVMsR0FBRyxTQUFILENBQWEsQ0FBYixDQUFULEVBQTBCLENBQTFCLEVBQTZCLENBQTdCLEVBQWdDLENBQWhDLEVBQW1DLEVBQW5DLEVBQXVDLGtCQUF2QztBQUNEO0FBQ0YsQ0FYRDtBQWFBLEtBQUssZUFBTCxFQUFzQixZQUFBO0FBQ3BCLFFBQUksTUFBTSxrQkFBTTs7Ozs7OztHQUFOLENBQVY7QUFTQSxRQUFJLEdBQUcsT0FBSCxJQUFjLElBQUksSUFBdEI7QUFDQSxhQUFTLE9BQVQsRUFBa0IsQ0FBbEIsRUFBcUIsQ0FBckIsRUFBd0IsQ0FBeEIsRUFBMkIsRUFBM0IsRUFBK0IsaUJBQS9CO0FBQ0EsUUFBSSxlQUFlLE9BQWYsRUFBd0IsYUFBeEIsQ0FBSixFQUE0QztBQUMxQyxZQUFJLEdBQUcsRUFBSCxHQUFTLEdBQVQsSUFBZ0IsUUFBUSxRQUE1QjtBQUNBLGlCQUFTLEVBQVQsRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLENBQW5CLEVBQXNCLEVBQXRCLEVBQTBCLFlBQTFCO0FBQ0EsaUJBQVMsR0FBVCxFQUFjLENBQWQsRUFBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsRUFBdUIsRUFBdkIsRUFBMkIsYUFBM0I7QUFDQSxZQUFJLGVBQWUsR0FBZixFQUFvQixhQUFwQixDQUFKLEVBQXdDO0FBQ3RDLGdCQUFJLEdBQUcsRUFBSCxJQUFTLElBQUksUUFBakI7QUFFQSxxQkFBUyxFQUFULEVBQWEsQ0FBYixFQUFnQixDQUFoQixFQUFtQixDQUFuQixFQUFzQixFQUF0QixFQUEwQixZQUExQjtBQUNEO0FBQ0Y7QUFDRixDQXRCRDtBQXdCQSxLQUFLLGtDQUFMLEVBQXlDLFVBQVM7QUFDaEQsUUFBSSxNQUFNLGtCQUFNOzs7Ozs7Ozs7O0dBQU4sQ0FBVjtBQVlBLFFBQUksR0FBRyxHQUFILElBQVUsSUFBSSxJQUFsQjtBQUNBLGFBQVMsR0FBVCxFQUFjLENBQWQsRUFBaUIsQ0FBakIsRUFBb0IsRUFBcEIsRUFBd0IsRUFBeEIsRUFBNEIsYUFBNUI7QUFDQSxRQUFJLGVBQWUsR0FBZixFQUFvQixhQUFwQixDQUFKLEVBQXdDO0FBQ3RDLFlBQUksR0FBRyxPQUFILEdBQWMsQ0FBZCxJQUFtQixJQUFJLFFBQTNCO0FBQ0EsaUJBQVMsT0FBVCxFQUFrQixDQUFsQixFQUFxQixDQUFyQixFQUF3QixDQUF4QixFQUEyQixFQUEzQixFQUErQixnQkFBL0I7QUFDQSxpQkFBUyxDQUFULEVBQVksQ0FBWixFQUFlLEVBQWYsRUFBbUIsQ0FBbkIsRUFBc0IsRUFBdEIsRUFBMEIsR0FBMUI7QUFDQSxZQUFJLGVBQWUsT0FBZixFQUF3QixnQkFBeEIsQ0FBSixFQUErQztBQUM3QyxnQkFBSSxlQUFlLFFBQVEsT0FBM0I7QUFDQSxxQkFBUyxZQUFULEVBQXVCLENBQXZCLEVBQTBCLEVBQTFCLEVBQThCLENBQTlCLEVBQWlDLENBQWpDLEVBQW9DLGVBQXBDO0FBQ0EsbUJBQU8sRUFBUCxDQUFVLFlBQVYsRUFBd0IsbUJBQXhCO0FBQ0EsZ0JBQUksWUFBSixFQUFrQjtBQUNoQixvQkFBSSxDQUFDLGFBQUQsSUFBa0IsYUFBYSxJQUFuQztBQUNBLHlCQUFTLGFBQVQsRUFBd0IsQ0FBeEIsRUFBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsRUFBaUMsQ0FBakMsRUFBb0MsaUJBQXBDO0FBQ0Esb0JBQUksZUFBZSxhQUFmLEVBQThCLGdCQUE5QixDQUFKLEVBQXFEO0FBQ25ELHdCQUFJLHVCQUF1QixjQUFjLE9BQXpDO0FBQ0EsMkJBQU8sRUFBUCxDQUFVLG9CQUFWLEVBQWdDLDBCQUFoQztBQUNBLHdCQUFJLG9CQUFKLEVBQTBCO0FBQ3hCLGlDQUFTLG9CQUFULEVBQStCLENBQS9CLEVBQWtDLEVBQWxDLEVBQXNDLENBQXRDLEVBQXlDLENBQXpDLEVBQTRDLHNCQUE1QztBQUNEO0FBQ0Y7QUFDRjtBQUNGO0FBQ0Y7QUFDRixDQXBDRDtBQXNDQSxLQUFLLDRCQUFMLEVBQW1DLFlBQUE7QUFDakMsUUFBSSxNQUFNLGtCQUFNOzs7O0dBQU4sQ0FBVjtBQU1BLFFBQUksR0FBRyxPQUFILEdBQWMsQ0FBZCxJQUFtQixJQUFJLElBQTNCO0FBRUEsYUFBUyxPQUFULEVBQWtCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCLENBQXhCLEVBQTJCLEVBQTNCLEVBQStCLFVBQS9CO0FBQ0EsYUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLENBQWYsRUFBa0IsQ0FBbEIsRUFBcUIsRUFBckIsRUFBeUIsV0FBekI7QUFDRCxDQVhEO0FBYUEsS0FBSywrQkFBTCxFQUFzQyxZQUFBO0FBQ3BDLFFBQUksTUFBTSxrQkFBTTs7O0dBQU4sQ0FBVjtBQUtBLFFBQUksR0FBRyxXQUFILEdBQWtCLENBQWxCLElBQXVCLElBQUksSUFBL0I7QUFFQSxhQUFTLFdBQVQsRUFBc0IsQ0FBdEIsRUFBeUIsQ0FBekIsRUFBNEIsQ0FBNUIsRUFBK0IsRUFBL0IsRUFBbUMsVUFBbkM7QUFDQSxhQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsQ0FBZixFQUFrQixDQUFsQixFQUFxQixFQUFyQixFQUF5QixXQUF6QjtBQUNELENBVkQ7QUFZQSxLQUFLLGtDQUFMLEVBQXlDLFlBQUE7QUFDdkMsUUFBSSxNQUFNLGtCQUFNOztHQUFOLENBQVY7QUFJQSxRQUFJLFFBQVEsSUFBSSxJQUFKLENBQVMsQ0FBVCxDQUFaO0FBQ0EsUUFBSSxlQUFlLEtBQWYsRUFBc0IsZ0JBQXRCLENBQUosRUFBNkM7QUFDM0MsWUFBSSxDQUFDLEdBQUQsSUFBUSxNQUFNLE9BQU4sQ0FBYyxJQUExQjtBQUNBLGlCQUFTLEdBQVQsRUFBYyxDQUFkLEVBQWlCLEVBQWpCLEVBQXFCLENBQXJCLEVBQXdCLEVBQXhCLEVBQTRCLGFBQTVCO0FBQ0Q7QUFFRCxRQUFJLElBQUksSUFBSSxJQUFKLENBQVMsQ0FBVCxDQUFSO0FBQ0EsYUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLEVBQWYsRUFBbUIsQ0FBbkIsRUFBc0IsRUFBdEIsRUFBMEIsV0FBMUI7QUFDRCxDQWJEO0FBZUEsS0FBSyw4QkFBTCxFQUFxQyxZQUFBO0FBQ25DLFFBQUksTUFBTSxrQkFBTTs7R0FBTixDQUFWO0FBSUEsUUFBSSxHQUFHLFFBQUgsR0FBZSxDQUFmLElBQW9CLElBQUksSUFBNUI7QUFFQSxhQUFTLFFBQVQsRUFBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBeUIsQ0FBekIsRUFBNEIsRUFBNUIsRUFBZ0MsYUFBaEM7QUFDQSxhQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsRUFBZixFQUFtQixDQUFuQixFQUFzQixFQUF0QixFQUEwQixhQUExQjtBQUNELENBVEQ7QUFXQSxLQUFLLE1BQUwsRUFBYSxZQUFBO0FBQ1gsUUFBSSxNQUFNLGtCQUFNOzs7R0FBTixDQUFWO0FBS0EsUUFBSSxDQUFDLE9BQUQsRUFBVSxHQUFWLElBQWlCLElBQUksSUFBekI7QUFFQSxhQUFTLE9BQVQsRUFBa0IsQ0FBbEIsRUFBcUIsQ0FBckIsRUFBd0IsQ0FBeEIsRUFBMkIsQ0FBM0I7QUFDQSxRQUFJLGVBQWUsR0FBZixFQUFvQixhQUFwQixDQUFKLEVBQXdDO0FBQ3RDLFlBQUksQ0FBQyxRQUFELElBQWEsSUFBSSxRQUFyQjtBQUNBLGlCQUFTLFFBQVQsRUFBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBeUIsQ0FBekIsRUFBNEIsRUFBNUI7QUFDRDtBQUNGLENBYkQ7QUFlQSxLQUFLLFNBQUwsRUFBZ0IsWUFBQTtBQUNkLFFBQUksTUFBTSxrQkFBTTs7OztHQUFOLENBQVY7QUFNQSxRQUFJLEdBQUcsR0FBSCxJQUFVLElBQUksSUFBbEI7QUFDQSxRQUFJLGVBQWUsR0FBZixFQUFvQixhQUFwQixDQUFKLEVBQXdDO0FBQ3RDLFlBQUksQ0FBQyxRQUFELEdBQWEsUUFBYixFQUF1QixXQUF2QixJQUFzQyxJQUFJLFFBQTlDO0FBRUEsaUJBQVMsUUFBVCxFQUFtQixDQUFuQixFQUFzQixDQUF0QixFQUF5QixDQUF6QixFQUE0QixFQUE1QjtBQUNBLGlCQUFTLFFBQVQsRUFBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBeUIsQ0FBekIsRUFBNEIsRUFBNUI7QUFDQSxpQkFBUyxXQUFULEVBQXNCLENBQXRCLEVBQXlCLEVBQXpCLEVBQTZCLENBQTdCLEVBQWdDLEVBQWhDO0FBQ0Q7QUFDRixDQWZEO0FBaUJBLEtBQUssb0JBQUwsRUFBMkIsWUFBQTtBQUN6QixRQUFJLE1BQU0sa0JBQU07Ozs7O0dBQU4sQ0FBVjtBQU9BLFFBQUksR0FBRyxHQUFILEdBQVUsSUFBVixJQUFrQixJQUFJLElBQTFCO0FBQ0EsUUFBSSxlQUFlLEdBQWYsRUFBb0IsYUFBcEIsQ0FBSixFQUF3QztBQUN0QyxZQUFJLENBQUMsUUFBRCxHQUFhLFFBQWIsRUFBdUIsV0FBdkIsSUFBc0MsSUFBSSxRQUE5QztBQUNBLGlCQUFTLFFBQVQsRUFBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBeUIsQ0FBekIsRUFBNEIsRUFBNUI7QUFDQSxpQkFBUyxRQUFULEVBQW1CLENBQW5CLEVBQXNCLENBQXRCLEVBQXlCLENBQXpCLEVBQTRCLEVBQTVCO0FBQ0EsaUJBQVMsV0FBVCxFQUFzQixDQUF0QixFQUF5QixFQUF6QixFQUE2QixDQUE3QixFQUFnQyxFQUFoQztBQUNBLFlBQUksZUFBZSxJQUFmLEVBQXFCLGFBQXJCLENBQUosRUFBeUM7QUFDdkMsZ0JBQUksQ0FBQyxRQUFELElBQWEsS0FBSyxRQUF0QjtBQUNBLHFCQUFTLElBQVQsRUFBZSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCLEVBQXhCO0FBQ0EscUJBQVMsUUFBVCxFQUFtQixDQUFuQixFQUFzQixFQUF0QixFQUEwQixDQUExQixFQUE2QixFQUE3QjtBQUNEO0FBQ0Y7QUFDRixDQXBCRDtBQXNCQSxLQUFLLG1CQUFMLEVBQTBCLFlBQUE7QUFDeEIsUUFBSSxNQUFNLGtCQUFNOzs7Ozs7Ozs7R0FBTixDQUFWO0FBV0EsUUFBSSxHQUFHLEdBQUgsSUFBVSxJQUFJLElBQWxCO0FBQ0EsUUFBSSxlQUFlLEdBQWYsRUFBb0IsYUFBcEIsQ0FBSixFQUF3QztBQUN0QyxZQUFJLENBQUMsT0FBRCxFQUFVLFFBQVYsRUFBb0IsUUFBcEIsRUFBOEIsT0FBOUIsRUFBdUMsb0JBQXZDLEVBQTZELFNBQTdELElBQTBFLElBQUksVUFBbEY7QUFFQSxpQkFBUyxPQUFULEVBQWtCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCLENBQXhCLEVBQTJCLEVBQTNCLEVBQStCLFVBQS9CO0FBQ0EsaUJBQVMsUUFBVCxFQUFtQixDQUFuQixFQUFzQixDQUF0QixFQUF5QixDQUF6QixFQUE0QixFQUE1QixFQUFnQyxXQUFoQztBQUNBLGlCQUFTLFFBQVQsRUFBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBeUIsQ0FBekIsRUFBNEIsRUFBNUIsRUFBZ0MsV0FBaEM7QUFDQSxpQkFBUyxPQUFULEVBQWtCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCLENBQXhCLEVBQTJCLEVBQTNCLEVBQStCLFVBQS9CO0FBQ0EsaUJBQVMsb0JBQVQsRUFBK0IsQ0FBL0IsRUFBa0MsQ0FBbEMsRUFBcUMsQ0FBckMsRUFBd0MsQ0FBeEMsRUFBMkMsd0JBQTNDO0FBRUEsaUJBQVMsUUFBUSxLQUFqQixFQUF3QixDQUF4QixFQUEyQixFQUEzQixFQUErQixDQUEvQixFQUFrQyxFQUFsQyxFQUFzQyxnQkFBdEM7QUFDQSxpQkFBUyxTQUFTLEtBQWxCLEVBQXlCLENBQXpCLEVBQTRCLEVBQTVCLEVBQWdDLENBQWhDLEVBQW1DLEVBQW5DLEVBQXVDLGlCQUF2QztBQUNBLGlCQUFTLFNBQVMsS0FBbEIsRUFBeUIsQ0FBekIsRUFBNEIsRUFBNUIsRUFBZ0MsQ0FBaEMsRUFBbUMsRUFBbkMsRUFBdUMsaUJBQXZDO0FBQ0EsaUJBQVMsUUFBUSxLQUFqQixFQUF3QixDQUF4QixFQUEyQixFQUEzQixFQUErQixDQUEvQixFQUFrQyxFQUFsQyxFQUFzQyxnQkFBdEM7QUFDQSxpQkFBUyxVQUFVLEtBQW5CLEVBQTBCLENBQTFCLEVBQTZCLEVBQTdCLEVBQWlDLENBQWpDLEVBQW9DLEVBQXBDLEVBQXdDLGtCQUF4QztBQUNEO0FBQ0YsQ0E1QkQ7QUE4QkEsS0FBSywyQkFBTCxFQUFrQyxZQUFBO0FBQ2hDLFFBQUksTUFBTSxrQkFBTSxvQkFBTixDQUFWO0FBRUEsUUFBSSxDQUFDLEdBQUQsSUFBUSxJQUFJLElBQWhCO0FBQ0EsUUFBSSxlQUFlLEdBQWYsRUFBb0IsYUFBcEIsQ0FBSixFQUF3QztBQUN0QyxZQUFJLENBQUMsR0FBRCxJQUFRLElBQUksVUFBaEI7QUFDQSxpQkFBUyxHQUFULEVBQWMsQ0FBZCxFQUFpQixDQUFqQixFQUFvQixDQUFwQixFQUF1QixFQUF2QjtBQUNBLFlBQUksRUFBRSxLQUFGLEtBQVksR0FBaEI7QUFDQSxpQkFBUyxLQUFULEVBQWdCLENBQWhCLEVBQW1CLENBQW5CLEVBQXNCLENBQXRCLEVBQXlCLEVBQXpCO0FBQ0Q7QUFDRixDQVZEO0FBWUEsS0FBSyxrQkFBTCxFQUF5QixZQUFBO0FBQ3ZCLFFBQUksTUFBTSxrQkFBTTs7Ozs7Ozs7Ozs7O0dBQU4sQ0FBVjtBQWNBLFFBQUksR0FBRyxHQUFILElBQVUsSUFBSSxJQUFsQjtBQUNBLFFBQUksZUFBZSxHQUFmLEVBQW9CLGFBQXBCLENBQUosRUFBd0M7QUFDdEMsWUFBSSxDQUFDLE9BQUQsRUFBVSxPQUFWLEVBQW1CLFFBQW5CLElBQStCLElBQUksVUFBdkM7QUFDQSxZQUFJLGVBQWUsUUFBUSxLQUEzQjtBQUNBLFlBQUksZUFBZSxRQUFRLEtBQTNCO0FBQ0EsWUFBSSxnQkFBZ0IsU0FBUyxLQUE3QjtBQUNBLGlCQUFTLE9BQVQsRUFBa0IsQ0FBbEIsRUFBcUIsQ0FBckIsRUFBd0IsQ0FBeEIsRUFBMkIsQ0FBM0I7QUFDQSxpQkFBUyxPQUFULEVBQWtCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCLENBQXhCLEVBQTJCLENBQTNCO0FBQ0EsaUJBQVMsWUFBVCxFQUF1QixDQUF2QixFQUEwQixFQUExQixFQUE4QixDQUE5QixFQUFpQyxDQUFqQztBQUNBLGlCQUFTLGFBQVQsRUFBd0IsQ0FBeEIsRUFBMkIsRUFBM0IsRUFBK0IsRUFBL0IsRUFBbUMsRUFBbkM7QUFDQSxpQkFBUyxZQUFULEVBQXVCLENBQXZCLEVBQTBCLEVBQTFCLEVBQThCLENBQTlCLEVBQWlDLENBQWpDO0FBRUEsWUFBSSxlQUFlLFlBQWYsRUFBNkIsaUJBQTdCLENBQUosRUFBcUQ7QUFDbkQsZ0JBQUksQ0FBQyxRQUFELEVBQVcsY0FBWCxJQUE2QixhQUFhLEtBQTlDO0FBQ0EscUJBQVMsUUFBVCxFQUFtQixDQUFuQixFQUFzQixFQUF0QixFQUEwQixDQUExQixFQUE2QixDQUE3QjtBQUNBLHFCQUFTLGNBQVQsRUFBeUIsQ0FBekIsRUFBNEIsQ0FBNUIsRUFBK0IsQ0FBL0IsRUFBa0MsQ0FBbEM7QUFDRDtBQUVELFlBQUksZUFBZSxhQUFmLEVBQThCLGlCQUE5QixDQUFKLEVBQXNEO0FBQ3BELGdCQUFJLENBQUMsYUFBRCxFQUFnQixNQUFoQixFQUF3QixnQkFBeEIsSUFBNEMsY0FBYyxLQUE5RDtBQUNBLHFCQUFTLGFBQVQsRUFBd0IsQ0FBeEIsRUFBMkIsRUFBM0IsRUFBK0IsRUFBL0IsRUFBbUMsQ0FBbkM7QUFDQSxxQkFBUyxNQUFULEVBQWlCLEVBQWpCLEVBQXFCLENBQXJCLEVBQXdCLEVBQXhCLEVBQTRCLEVBQTVCO0FBQ0EscUJBQVMsZ0JBQVQsRUFBMkIsRUFBM0IsRUFBK0IsRUFBL0IsRUFBbUMsRUFBbkMsRUFBdUMsRUFBdkM7QUFDRDtBQUNGO0FBQ0YsQ0F4Q0Q7QUEwQ0EsS0FBSyxpQkFBTCxFQUF3QixZQUFBO0FBQ3RCLFFBQUksTUFBTSxrQkFBTTs7OztHQUFOLENBQVY7QUFNQSxRQUFJLEdBQUcsR0FBSCxJQUFVLElBQUksSUFBbEI7QUFFQSxhQUFTLEdBQVQsRUFBYyxDQUFkLEVBQWlCLENBQWpCLEVBQW9CLENBQXBCLEVBQXVCLEVBQXZCO0FBQ0EsUUFBSSxlQUFlLEdBQWYsRUFBb0IsYUFBcEIsQ0FBSixFQUF3QztBQUN0QyxZQUFJLENBQUMsS0FBRCxFQUFRLENBQVIsSUFBYSxJQUFJLFFBQXJCO0FBQ0EsaUJBQVMsS0FBVCxFQUFnQixDQUFoQixFQUFtQixFQUFuQixFQUF1QixDQUF2QixFQUEwQixFQUExQjtBQUNBLGlCQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsRUFBZixFQUFtQixDQUFuQixFQUFzQixFQUF0QjtBQUVBLFlBQUksZUFBZSxDQUFmLEVBQWtCLGFBQWxCLENBQUosRUFBc0M7QUFDcEMsZ0JBQUksQ0FBQyxLQUFELElBQVUsRUFBRSxRQUFoQjtBQUNBLHFCQUFTLEtBQVQsRUFBZ0IsQ0FBaEIsRUFBbUIsRUFBbkIsRUFBdUIsQ0FBdkIsRUFBMEIsRUFBMUI7QUFDRDtBQUNGO0FBQ0YsQ0FwQkQ7QUFzQkEsS0FBSywrQkFBTCxFQUFzQyxZQUFBO0FBQ3BDLFFBQUksTUFBTSxrQkFBTTs7Ozs7VUFBTixDQUFWO0FBT0EsUUFBSSxHQUFHLE9BQUgsSUFBYyxJQUFJLElBQXRCO0FBQ0EsYUFBUyxPQUFULEVBQWtCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCLENBQXhCLEVBQTJCLENBQTNCLEVBQThCLFVBQTlCO0FBRUEsUUFBSSxlQUFlLE9BQWYsRUFBd0IsZ0JBQXhCLENBQUosRUFBK0M7QUFDN0MsWUFBSSxDQUFDLEdBQUQsSUFBUSxRQUFRLE9BQVIsQ0FBZ0IsSUFBNUI7QUFDQSxpQkFBUyxHQUFULEVBQWMsQ0FBZCxFQUFpQixDQUFqQixFQUFvQixDQUFwQixFQUF1QixFQUF2QixFQUEyQiw0QkFBM0I7QUFDRDtBQUNGLENBZkQ7QUFpQkEsS0FBSyx5Q0FBTCxFQUFnRCxZQUFBO0FBQzlDLFFBQUksTUFBTSxrQkFBTTs7Ozs7VUFBTixDQUFWO0FBT0EsUUFBSSxHQUFHLE9BQUgsSUFBYyxJQUFJLElBQXRCO0FBQ0EsYUFBUyxPQUFULEVBQWtCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCLENBQXhCLEVBQTJCLENBQTNCLEVBQThCLFVBQTlCO0FBQ0EsUUFBSSxlQUFlLE9BQWYsRUFBd0IsZ0JBQXhCLEtBQTZDLGVBQWUsUUFBUSxPQUF2QixFQUFnQyxPQUFoQyxDQUFqRCxFQUEyRjtBQUN6RixZQUFJLENBQUMsYUFBRCxJQUFrQixRQUFRLE9BQVIsQ0FBZ0IsSUFBdEM7QUFDQSxZQUNFLGVBQWUsYUFBZixFQUE4QixnQkFBOUIsS0FDQSxlQUFlLGNBQWMsT0FBN0IsRUFBc0MsT0FBdEMsQ0FGRixFQUdFO0FBQ0EsZ0JBQUksQ0FBQyxHQUFELElBQVEsY0FBYyxPQUFkLENBQXNCLElBQWxDO0FBQ0EscUJBQVMsR0FBVCxFQUFjLENBQWQsRUFBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsRUFBdUIsRUFBdkIsRUFBMkIsaUNBQTNCO0FBQ0Q7QUFDRjtBQUNGLENBcEJEO0FBc0JBLEtBQUssOEJBQUwsRUFBcUMsWUFBQTtBQUNuQyxRQUFJLE1BQU0sa0JBQU07Ozs7O1dBQU4sQ0FBVjtBQU9BLFFBQUksQ0FBQyxPQUFELElBQVksSUFBSSxJQUFwQjtBQUNBLGFBQVMsT0FBVCxFQUFrQixDQUFsQixFQUFxQixDQUFyQixFQUF3QixDQUF4QixFQUEyQixFQUEzQixFQUErQixVQUEvQjtBQUNBLFFBQUksZUFBZSxPQUFmLEVBQXdCLGdCQUF4QixDQUFKLEVBQStDO0FBQzdDLFlBQUksR0FBRyxHQUFILElBQVUsUUFBUSxPQUFSLENBQWdCLElBQTlCO0FBQ0EsaUJBQVMsR0FBVCxFQUFjLENBQWQsRUFBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsRUFBdUIsRUFBdkIsRUFBMkIsNEJBQTNCO0FBQ0Q7QUFDRixDQWREIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJlcHJvY2VzcyBhcyBwYXJzZSwgQVNUIH0gZnJvbSAnLi4nO1xuXG5RVW5pdC5tb2R1bGUoJ1tnbGltbWVyLXN5bnRheF0gUGFyc2VyIC0gTG9jYXRpb24gSW5mbycpO1xuXG5mdW5jdGlvbiBhc3NlcnROb2RlVHlwZTxUIGV4dGVuZHMga2V5b2YgQVNULk5vZGVzPihcbiAgbm9kZTogQVNULk5vZGUgfCBudWxsIHwgdW5kZWZpbmVkLFxuICB0eXBlOiBUXG4pOiBub2RlIGlzIEFTVC5Ob2Rlc1tUXSB7XG4gIGxldCBub2RlVHlwZSA9IG5vZGUgJiYgbm9kZS50eXBlO1xuICBRVW5pdC5hc3NlcnQucHVzaFJlc3VsdCh7XG4gICAgcmVzdWx0OiBub2RlVHlwZSA9PT0gdHlwZSxcbiAgICBhY3R1YWw6IG5vZGVUeXBlLFxuICAgIGV4cGVjdGVkOiB0eXBlLFxuICAgIG1lc3NhZ2U6IGBleHBlY3RlZCBub2RlIHR5cGUgdG8gYmUgJHtub2RlfSBidXQgd2FzICR7bm9kZVR5cGV9YCxcbiAgfSk7XG4gIHJldHVybiBub2RlVHlwZSA9PT0gdHlwZTtcbn1cblxuY29uc3QgeyB0ZXN0IH0gPSBRVW5pdDtcblxuZnVuY3Rpb24gbG9jRXF1YWwoXG4gIG5vZGU6IEFTVC5Ob2RlIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgc3RhcnRMaW5lOiBudW1iZXIsXG4gIHN0YXJ0Q29sdW1uOiBudW1iZXIsXG4gIGVuZExpbmU6IG51bWJlcixcbiAgZW5kQ29sdW1uOiBudW1iZXIsXG4gIG1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeShub2RlKVxuKSB7XG4gIGxldCBleHBlY3RlZCA9IHtcbiAgICBzb3VyY2U6IG51bGwsXG4gICAgc3RhcnQ6IHsgbGluZTogc3RhcnRMaW5lLCBjb2x1bW46IHN0YXJ0Q29sdW1uIH0sXG4gICAgZW5kOiB7IGxpbmU6IGVuZExpbmUsIGNvbHVtbjogZW5kQ29sdW1uIH0sXG4gIH07XG5cbiAgUVVuaXQuYXNzZXJ0LmRlZXBFcXVhbChub2RlICYmIG5vZGUubG9jLCBleHBlY3RlZCwgbWVzc2FnZSk7XG59XG5cbnRlc3QoJ3Byb2dyYW1zJywgKCkgPT4ge1xuICBsZXQgYXN0ID0gcGFyc2UoYFxuICB7eyNpZiBmb299fVxuICAgIHt7YmFyfX1cbiAgICAgICB7ey9pZn19XG4gICAgYCk7XG5cbiAgbG9jRXF1YWwoYXN0LCAxLCAwLCA1LCA0LCAnb3V0ZXIgcHJvZ3JhbScpO1xuICBsZXQgc3RhdGVtZW50ID0gYXN0LmJvZHlbMV07XG4gIGlmIChhc3NlcnROb2RlVHlwZShzdGF0ZW1lbnQsICdCbG9ja1N0YXRlbWVudCcpKSB7XG4gICAgbG9jRXF1YWwoc3RhdGVtZW50LnByb2dyYW0sIDIsIDEzLCA0LCA3LCAnbmVzdGVkIHByb2dyYW0nKTtcbiAgfVxufSk7XG5cbnRlc3QoJ2Jsb2NrcycsIGZ1bmN0aW9uKCkge1xuICBsZXQgYXN0ID0gcGFyc2UoYFxuICB7eyNpZiBmb299fVxuICAgIHt7I2lmIGJhcn19XG4gICAgICAgIHRlc3RcbiAgICAgICAge3tlbHNlfX1cbiAgICAgIHRlc3RcbiAge3svaWYgICAgfX1cbiAgICAgICB7ey9pZlxuICAgICAgfX1cbiAgICBgKTtcblxuICBsZXQgWywgYmxvY2tdID0gYXN0LmJvZHkgYXMgW2FueSwgQVNULkJsb2NrU3RhdGVtZW50XTtcbiAgbGV0IFtuZXN0ZWRCbG9ja10gPSBibG9jay5wcm9ncmFtLmJvZHkgYXMgW0FTVC5CbG9ja1N0YXRlbWVudF07XG4gIGxldCBbbmVzdGVkQmxvY2tUZXh0XSA9IG5lc3RlZEJsb2NrLnByb2dyYW0uYm9keTtcbiAgbGV0IG5lc3RlZEludmVyc2UgPSBuZXN0ZWRCbG9jay5pbnZlcnNlO1xuXG4gIGxvY0VxdWFsKGJsb2NrLCAyLCAyLCA5LCA4LCAnb3V0ZXIgYmxvY2snKTtcbiAgbG9jRXF1YWwobmVzdGVkQmxvY2ssIDMsIDQsIDcsIDEzLCAnbmVzdGVkIGJsb2NrJyk7XG4gIGxvY0VxdWFsKG5lc3RlZEJsb2NrVGV4dCwgNCwgMCwgNSwgMCk7XG4gIGxvY0VxdWFsKG5lc3RlZEludmVyc2UgYXMgQVNULk5vZGUsIDUsIDE2LCA3LCAyKTtcbn0pO1xuXG50ZXN0KCdtdXN0YWNoZScsIGZ1bmN0aW9uKCkge1xuICBsZXQgYXN0ID0gcGFyc2UoYFxuICAgIHt7Zm9vfX1cbiAgICB7eyNpZiBmb299fVxuICAgICAgYmFyOiB7e2JhclxuICAgICAgICB9fVxuICAgIHt7L2lmfX1cbiAgYCk7XG5cbiAgbGV0IFssIGZvbywgLCBpbm5lckJsb2NrXSA9IGFzdC5ib2R5O1xuXG4gIGlmIChhc3NlcnROb2RlVHlwZShpbm5lckJsb2NrLCAnQmxvY2tTdGF0ZW1lbnQnKSkge1xuICAgIGxldCBbYmFyVGV4dCwgYmFyXSA9IGlubmVyQmxvY2sucHJvZ3JhbS5ib2R5O1xuXG4gICAgbG9jRXF1YWwoZm9vLCAyLCA0LCAyLCAxMSwgJ291dGVyIG11c3RhY2hlJyk7XG4gICAgbG9jRXF1YWwoYmFyVGV4dCwgNCwgMCwgNCwgMTEpO1xuICAgIGxvY0VxdWFsKGJhciwgNCwgMTEsIDUsIDEwLCAnaW5uZXIgbXVzdGFjaGUnKTtcbiAgfVxufSk7XG5cbnRlc3QoJ2VsZW1lbnQgbW9kaWZpZXInLCBmdW5jdGlvbigpIHtcbiAgbGV0IGFzdCA9IHBhcnNlKGBcbiAgICA8ZGl2IHt7YmluZC1hdHRyXG4gICAgICBmb29cbiAgICAgIGJhcj13YXR9fT48L2Rpdj5cbiAgYCk7XG5cbiAgbGV0IGVsID0gYXN0LmJvZHlbMV07XG4gIGlmIChhc3NlcnROb2RlVHlwZShlbCwgJ0VsZW1lbnROb2RlJykpIHtcbiAgICBsb2NFcXVhbChlbC5tb2RpZmllcnNbMF0sIDIsIDksIDQsIDE1LCAnZWxlbWVudCBtb2RpZmllcicpO1xuICB9XG59KTtcblxudGVzdCgnaHRtbCBlbGVtZW50cycsIGZ1bmN0aW9uKCkge1xuICBsZXQgYXN0ID0gcGFyc2UoYFxuICAgIDxzZWN0aW9uPlxuICAgICAgPGJyPlxuICAgICAgPGRpdj5cbiAgICAgICAgPGhyIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L3NlY3Rpb24+XG4gIGApO1xuXG4gIGxldCBbLCBzZWN0aW9uXSA9IGFzdC5ib2R5O1xuICBsb2NFcXVhbChzZWN0aW9uLCAyLCA0LCA3LCAxNCwgJ3NlY3Rpb24gZWxlbWVudCcpO1xuICBpZiAoYXNzZXJ0Tm9kZVR5cGUoc2VjdGlvbiwgJ0VsZW1lbnROb2RlJykpIHtcbiAgICBsZXQgWywgYnIsICwgZGl2XSA9IHNlY3Rpb24uY2hpbGRyZW47XG4gICAgbG9jRXF1YWwoYnIsIDMsIDYsIDMsIDEwLCAnYnIgZWxlbWVudCcpO1xuICAgIGxvY0VxdWFsKGRpdiwgNCwgNiwgNiwgMTIsICdkaXYgZWxlbWVudCcpO1xuICAgIGlmIChhc3NlcnROb2RlVHlwZShkaXYsICdFbGVtZW50Tm9kZScpKSB7XG4gICAgICBsZXQgWywgaHJdID0gZGl2LmNoaWxkcmVuO1xuXG4gICAgICBsb2NFcXVhbChociwgNSwgOCwgNSwgMTQsICdociBlbGVtZW50Jyk7XG4gICAgfVxuICB9XG59KTtcblxudGVzdCgnaHRtbCBlbGVtZW50cyB3aXRoIG5lc3RlZCBibG9ja3MnLCBhc3NlcnQgPT4ge1xuICBsZXQgYXN0ID0gcGFyc2UoYFxuICAgIDxkaXY+XG4gICAgICB7eyNpZiBpc1NpbmdsZUVycm9yfX1cbiAgICAgICAgU2luZ2xlIGVycm9yIGhlcmUhXG4gICAgICB7e2Vsc2UgaWYgZXJyb3JzfX1cbiAgICAgICAgTXVsdGlwbGUgZXJyb3JzIGhlcmUhXG4gICAgICB7e2Vsc2V9fVxuICAgICAgICBObyBlcnJvcnMgZm91bmQhXG4gICAgICB7ey9pZn19IDxwPkhpIHRoZXJlITwvcD5cbiAgICA8L2Rpdj5cbiAgYCk7XG5cbiAgbGV0IFssIGRpdl0gPSBhc3QuYm9keTtcbiAgbG9jRXF1YWwoZGl2LCAyLCA0LCAxMCwgMTAsICdkaXYgZWxlbWVudCcpO1xuICBpZiAoYXNzZXJ0Tm9kZVR5cGUoZGl2LCAnRWxlbWVudE5vZGUnKSkge1xuICAgIGxldCBbLCBpZkJsb2NrLCAsIHBdID0gZGl2LmNoaWxkcmVuO1xuICAgIGxvY0VxdWFsKGlmQmxvY2ssIDMsIDYsIDksIDEzLCAnb3V0ZXIgaWYgYmxvY2snKTtcbiAgICBsb2NFcXVhbChwLCA5LCAxNCwgOSwgMzAsICdwJyk7XG4gICAgaWYgKGFzc2VydE5vZGVUeXBlKGlmQmxvY2ssICdCbG9ja1N0YXRlbWVudCcpKSB7XG4gICAgICBsZXQgaW52ZXJzZUJsb2NrID0gaWZCbG9jay5pbnZlcnNlO1xuICAgICAgbG9jRXF1YWwoaW52ZXJzZUJsb2NrLCA1LCAyNCwgNywgNiwgJ2ludmVyc2UgYmxvY2snKTtcbiAgICAgIGFzc2VydC5vayhpbnZlcnNlQmxvY2ssICdoYXMgaW52ZXJzZSBibG9jaycpO1xuICAgICAgaWYgKGludmVyc2VCbG9jaykge1xuICAgICAgICBsZXQgW25lc3RlZElmQmxvY2tdID0gaW52ZXJzZUJsb2NrLmJvZHk7XG4gICAgICAgIGxvY0VxdWFsKG5lc3RlZElmQmxvY2ssIDUsIDYsIDksIDYsICduZXN0ZWQgaWYgYmxvY2snKTtcbiAgICAgICAgaWYgKGFzc2VydE5vZGVUeXBlKG5lc3RlZElmQmxvY2ssICdCbG9ja1N0YXRlbWVudCcpKSB7XG4gICAgICAgICAgbGV0IG5lc3RlZElmSW52ZXJzZUJsb2NrID0gbmVzdGVkSWZCbG9jay5pbnZlcnNlO1xuICAgICAgICAgIGFzc2VydC5vayhuZXN0ZWRJZkludmVyc2VCbG9jaywgJ2hhcyBuZXN0ZWQgaW52ZXJzZSBibG9jaycpO1xuICAgICAgICAgIGlmIChuZXN0ZWRJZkludmVyc2VCbG9jaykge1xuICAgICAgICAgICAgbG9jRXF1YWwobmVzdGVkSWZJbnZlcnNlQmxvY2ssIDcsIDE0LCA5LCA2LCAnbmVzdGVkIGludmVyc2UgYmxvY2snKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG50ZXN0KCdibG9jayArIG5ld2xpbmUgKyBlbGVtZW50ICcsIGZ1bmN0aW9uKCkge1xuICBsZXQgYXN0ID0gcGFyc2UoYFxuICAgIHt7I2lmIHN0dWZmfX1cbiAgICB7ey9pZn19XG4gICAgPHA+SGkhPC9wPlxuICBgKTtcblxuICBsZXQgWywgaWZCbG9jaywgLCBwXSA9IGFzdC5ib2R5O1xuXG4gIGxvY0VxdWFsKGlmQmxvY2ssIDIsIDQsIDMsIDExLCAnaWYgYmxvY2snKTtcbiAgbG9jRXF1YWwocCwgNCwgNCwgNCwgMTQsICdwIGVsZW1lbnQnKTtcbn0pO1xuXG50ZXN0KCdtdXN0YWNoZSArIG5ld2xpbmUgKyBlbGVtZW50ICcsIGZ1bmN0aW9uKCkge1xuICBsZXQgYXN0ID0gcGFyc2UoYFxuICAgIHt7Zm9vfX1cbiAgICA8cD5IaSE8L3A+XG4gIGApO1xuXG4gIGxldCBbLCBmb29NdXN0YWNoZSwgLCBwXSA9IGFzdC5ib2R5O1xuXG4gIGxvY0VxdWFsKGZvb011c3RhY2hlLCAyLCA0LCAyLCAxMSwgJ2lmIGJsb2NrJyk7XG4gIGxvY0VxdWFsKHAsIDMsIDQsIDMsIDE0LCAncCBlbGVtZW50Jyk7XG59KTtcblxudGVzdCgnYmxvY2tzIHdpdGggbmVzdGVkIGh0bWwgZWxlbWVudHMnLCBmdW5jdGlvbigpIHtcbiAgbGV0IGFzdCA9IHBhcnNlKGBcbiAgICB7eyNmb28tYmFyfX08ZGl2PkZvbzwvZGl2Pnt7L2Zvby1iYXJ9fSA8cD5IaSE8L3A+XG4gIGApO1xuXG4gIGxldCBibG9jayA9IGFzdC5ib2R5WzFdO1xuICBpZiAoYXNzZXJ0Tm9kZVR5cGUoYmxvY2ssICdCbG9ja1N0YXRlbWVudCcpKSB7XG4gICAgbGV0IFtkaXZdID0gYmxvY2sucHJvZ3JhbS5ib2R5O1xuICAgIGxvY0VxdWFsKGRpdiwgMiwgMTYsIDIsIDMwLCAnZGl2IGVsZW1lbnQnKTtcbiAgfVxuXG4gIGxldCBwID0gYXN0LmJvZHlbM107XG4gIGxvY0VxdWFsKHAsIDIsIDQzLCAyLCA1MywgJ3AgZWxlbWVudCcpO1xufSk7XG5cbnRlc3QoJ2h0bWwgZWxlbWVudHMgYWZ0ZXIgbXVzdGFjaGUnLCBmdW5jdGlvbigpIHtcbiAgbGV0IGFzdCA9IHBhcnNlKGBcbiAgICB7e2Zvby1iYXJ9fSA8cD5IaSE8L3A+XG4gIGApO1xuXG4gIGxldCBbLCBtdXN0YWNoZSwgLCBwXSA9IGFzdC5ib2R5O1xuXG4gIGxvY0VxdWFsKG11c3RhY2hlLCAyLCA0LCAyLCAxNSwgJ3t7Zm9vLWJhcn19Jyk7XG4gIGxvY0VxdWFsKHAsIDIsIDE2LCAyLCAyNiwgJ2RpdiBlbGVtZW50Jyk7XG59KTtcblxudGVzdCgndGV4dCcsIGZ1bmN0aW9uKCkge1xuICBsZXQgYXN0ID0gcGFyc2UoYFxuICAgIGZvbyFcbiAgICA8ZGl2PmJsYWg8L2Rpdj5cbiAgYCk7XG5cbiAgbGV0IFtmb29UZXh0LCBkaXZdID0gYXN0LmJvZHk7XG5cbiAgbG9jRXF1YWwoZm9vVGV4dCwgMSwgMCwgMywgNCk7XG4gIGlmIChhc3NlcnROb2RlVHlwZShkaXYsICdFbGVtZW50Tm9kZScpKSB7XG4gICAgbGV0IFtibGFoVGV4dF0gPSBkaXYuY2hpbGRyZW47XG4gICAgbG9jRXF1YWwoYmxhaFRleHQsIDMsIDksIDMsIDEzKTtcbiAgfVxufSk7XG5cbnRlc3QoJ2NvbW1lbnQnLCBmdW5jdGlvbigpIHtcbiAgbGV0IGFzdCA9IHBhcnNlKGBcbiAgICA8ZGl2PjwhLS0gYmxhaCBibGFoIGJsYWggYmxhaCAtLT5cbiAgICAgIDwhLS0gZGVycCBoZXJreSAtLT48ZGl2PjwvZGl2PlxuICAgIDwvZGl2PlxuICBgKTtcblxuICBsZXQgWywgZGl2XSA9IGFzdC5ib2R5O1xuICBpZiAoYXNzZXJ0Tm9kZVR5cGUoZGl2LCAnRWxlbWVudE5vZGUnKSkge1xuICAgIGxldCBbY29tbWVudDEsICwgY29tbWVudDIsIHRyYWlsaW5nRGl2XSA9IGRpdi5jaGlsZHJlbjtcblxuICAgIGxvY0VxdWFsKGNvbW1lbnQxLCAyLCA5LCAyLCAzNyk7XG4gICAgbG9jRXF1YWwoY29tbWVudDIsIDMsIDYsIDMsIDI1KTtcbiAgICBsb2NFcXVhbCh0cmFpbGluZ0RpdiwgMywgMjUsIDMsIDM2KTtcbiAgfVxufSk7XG5cbnRlc3QoJ2hhbmRsZWJhcnMgY29tbWVudCcsIGZ1bmN0aW9uKCkge1xuICBsZXQgYXN0ID0gcGFyc2UoYFxuICAgIDxkaXY+e3shLS0gYmxhaCBibGFoIGJsYWggYmxhaCAtLX19XG4gICAgICB7eyEtLSBkZXJwIGhlcmt5IC0tfX08ZGl2PjwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxzcGFuIHt7ISBkZXJweSB9fT48L3NwYW4+XG4gIGApO1xuXG4gIGxldCBbLCBkaXYsICwgc3Bhbl0gPSBhc3QuYm9keTtcbiAgaWYgKGFzc2VydE5vZGVUeXBlKGRpdiwgJ0VsZW1lbnROb2RlJykpIHtcbiAgICBsZXQgW2NvbW1lbnQxLCAsIGNvbW1lbnQyLCB0cmFpbGluZ0Rpdl0gPSBkaXYuY2hpbGRyZW47XG4gICAgbG9jRXF1YWwoY29tbWVudDEsIDIsIDksIDIsIDM5KTtcbiAgICBsb2NFcXVhbChjb21tZW50MiwgMywgNiwgMywgMjcpO1xuICAgIGxvY0VxdWFsKHRyYWlsaW5nRGl2LCAzLCAyNywgMywgMzgpO1xuICAgIGlmIChhc3NlcnROb2RlVHlwZShzcGFuLCAnRWxlbWVudE5vZGUnKSkge1xuICAgICAgbGV0IFtjb21tZW50M10gPSBzcGFuLmNvbW1lbnRzO1xuICAgICAgbG9jRXF1YWwoc3BhbiwgNSwgNCwgNSwgMzApO1xuICAgICAgbG9jRXF1YWwoY29tbWVudDMsIDUsIDEwLCA1LCAyMik7XG4gICAgfVxuICB9XG59KTtcblxudGVzdCgnZWxlbWVudCBhdHRyaWJ1dGUnLCBmdW5jdGlvbigpIHtcbiAgbGV0IGFzdCA9IHBhcnNlKGBcbiAgICA8ZGl2IGRhdGEtZm9vPVwiYmxhaFwiXG4gICAgICBkYXRhLWRlcnA9XCJsb2xvbFwiXG5kYXRhLWJhcmY9XCJoZXJweVwiXG4gIGRhdGEtcXV4PWxvbG5vcXVvdGVzXG4gICAgICAgIGRhdGEtc29tZXRoaW5nLWJvb2xlYW5cbiAgICBkYXRhLWh1cmt5PVwic29tZSB7e3RoaW5nfX0gaGVyZVwiPlxuICAgICAgSGksIGZpdmV0YW5sZXkhXG4gICAgPC9kaXY+XG4gIGApO1xuXG4gIGxldCBbLCBkaXZdID0gYXN0LmJvZHk7XG4gIGlmIChhc3NlcnROb2RlVHlwZShkaXYsICdFbGVtZW50Tm9kZScpKSB7XG4gICAgbGV0IFtkYXRhRm9vLCBkYXRhRGVycCwgZGF0YUJhcmYsIGRhdGFRdXgsIGRhdGFTb21ldGhpbmdCb29sZWFuLCBkYXRhSHVya3ldID0gZGl2LmF0dHJpYnV0ZXM7XG5cbiAgICBsb2NFcXVhbChkYXRhRm9vLCAyLCA5LCAyLCAyNCwgJ2RhdGEtZm9vJyk7XG4gICAgbG9jRXF1YWwoZGF0YURlcnAsIDMsIDYsIDMsIDIzLCAnZGF0YS1kZXJwJyk7XG4gICAgbG9jRXF1YWwoZGF0YUJhcmYsIDQsIDAsIDQsIDE3LCAnZGF0YS1iYXJmJyk7XG4gICAgbG9jRXF1YWwoZGF0YVF1eCwgNSwgMiwgNSwgMjIsICdkYXRhLXF1eCcpO1xuICAgIGxvY0VxdWFsKGRhdGFTb21ldGhpbmdCb29sZWFuLCA2LCA4LCA3LCA0LCAnZGF0YS1zb21ldGhpbmctYm9vbGVhbicpO1xuXG4gICAgbG9jRXF1YWwoZGF0YUZvby52YWx1ZSwgMiwgMTgsIDIsIDI0LCAnZGF0YS1mb28gdmFsdWUnKTtcbiAgICBsb2NFcXVhbChkYXRhRGVycC52YWx1ZSwgMywgMTYsIDMsIDIzLCAnZGF0YS1kZXJwIHZhbHVlJyk7XG4gICAgbG9jRXF1YWwoZGF0YUJhcmYudmFsdWUsIDQsIDEwLCA0LCAxNywgJ2RhdGEtYmFyZiB2YWx1ZScpO1xuICAgIGxvY0VxdWFsKGRhdGFRdXgudmFsdWUsIDUsIDExLCA1LCAyMiwgJ2RhdGEtcXV4IHZhbHVlJyk7XG4gICAgbG9jRXF1YWwoZGF0YUh1cmt5LnZhbHVlLCA3LCAxNSwgNywgMzYsICdkYXRhLWh1cmt5IHZhbHVlJyk7XG4gIH1cbn0pO1xuXG50ZXN0KCdlbGVtZW50IGR5bmFtaWMgYXR0cmlidXRlJywgZnVuY3Rpb24oKSB7XG4gIGxldCBhc3QgPSBwYXJzZShgPGltZyBzcmM9e3tibGFofX0+YCk7XG5cbiAgbGV0IFtpbWddID0gYXN0LmJvZHk7XG4gIGlmIChhc3NlcnROb2RlVHlwZShpbWcsICdFbGVtZW50Tm9kZScpKSB7XG4gICAgbGV0IFtzcmNdID0gaW1nLmF0dHJpYnV0ZXM7XG4gICAgbG9jRXF1YWwoc3JjLCAxLCA1LCAxLCAxNyk7XG4gICAgbGV0IHsgdmFsdWUgfSA9IHNyYztcbiAgICBsb2NFcXVhbCh2YWx1ZSwgMSwgOSwgMSwgMTcpO1xuICB9XG59KTtcblxudGVzdCgnY29uY2F0IHN0YXRlbWVudCcsIGZ1bmN0aW9uKCkge1xuICBsZXQgYXN0ID0gcGFyc2UoYFxuICAgIDxkaXYgZGF0YS1mb289XCJ7e2lmIGZvb1xuICAgICAgICBcImFjdGl2ZVwiXG4gICAgXCJpbmFjdGl2ZVwiXG4gIH19XG5kZXJwXCJcbiAgZGF0YS1iYXI9XCJcbmZvb1wiXG4gIGRhdGEtZGVycD1cImZvb1xue3tjb25jYXQgJyd9fVxuICAgIGh1enphaFwiXG4gICAgPjwvZGl2PlxuICBgKTtcblxuICBsZXQgWywgZGl2XSA9IGFzdC5ib2R5O1xuICBpZiAoYXNzZXJ0Tm9kZVR5cGUoZGl2LCAnRWxlbWVudE5vZGUnKSkge1xuICAgIGxldCBbZGF0YUZvbywgZGF0YUJhciwgZGF0YURlcnBdID0gZGl2LmF0dHJpYnV0ZXM7XG4gICAgbGV0IGRhdGFGb29WYWx1ZSA9IGRhdGFGb28udmFsdWU7XG4gICAgbGV0IGRhdGFCYXJWYWx1ZSA9IGRhdGFCYXIudmFsdWU7XG4gICAgbGV0IGRhdGFEZXJwVmFsdWUgPSBkYXRhRGVycC52YWx1ZTtcbiAgICBsb2NFcXVhbChkYXRhRm9vLCAyLCA5LCA2LCA1KTtcbiAgICBsb2NFcXVhbChkYXRhQmFyLCA3LCAyLCA4LCA0KTtcbiAgICBsb2NFcXVhbChkYXRhQmFyVmFsdWUsIDcsIDExLCA4LCA0KTtcbiAgICBsb2NFcXVhbChkYXRhRGVycFZhbHVlLCA5LCAxMiwgMTEsIDExKTtcbiAgICBsb2NFcXVhbChkYXRhRm9vVmFsdWUsIDIsIDE4LCA2LCA1KTtcblxuICAgIGlmIChhc3NlcnROb2RlVHlwZShkYXRhRm9vVmFsdWUsICdDb25jYXRTdGF0ZW1lbnQnKSkge1xuICAgICAgbGV0IFtpbmxpbmVJZiwgc3RhdGljRGVycFRleHRdID0gZGF0YUZvb1ZhbHVlLnBhcnRzO1xuICAgICAgbG9jRXF1YWwoaW5saW5lSWYsIDIsIDE5LCA1LCA0KTtcbiAgICAgIGxvY0VxdWFsKHN0YXRpY0RlcnBUZXh0LCA1LCA0LCA2LCA0KTtcbiAgICB9XG5cbiAgICBpZiAoYXNzZXJ0Tm9kZVR5cGUoZGF0YURlcnBWYWx1ZSwgJ0NvbmNhdFN0YXRlbWVudCcpKSB7XG4gICAgICBsZXQgW2Zvb1N0YXRpY1RleHQsIGNvbmNhdCwgaHV6emFoU3RhdGljVGV4dF0gPSBkYXRhRGVycFZhbHVlLnBhcnRzO1xuICAgICAgbG9jRXF1YWwoZm9vU3RhdGljVGV4dCwgOSwgMTQsIDEwLCAwKTtcbiAgICAgIGxvY0VxdWFsKGNvbmNhdCwgMTAsIDAsIDEwLCAxMyk7XG4gICAgICBsb2NFcXVhbChodXp6YWhTdGF0aWNUZXh0LCAxMCwgMTMsIDExLCAxMCk7XG4gICAgfVxuICB9XG59KTtcblxudGVzdCgnY2hhciByZWZlcmVuY2VzJywgZnVuY3Rpb24oKSB7XG4gIGxldCBhc3QgPSBwYXJzZShgXG4gICAgJmd0OzxkaXY+Jmx0OzxwPlxuICAgICAgSGksIGRhbm1jY2xhaW4gJmV4Y2w7PC9wPlxuICAgIDwvZGl2PlxuICBgKTtcblxuICBsZXQgWywgZGl2XSA9IGFzdC5ib2R5O1xuXG4gIGxvY0VxdWFsKGRpdiwgMiwgOCwgNCwgMTApO1xuICBpZiAoYXNzZXJ0Tm9kZVR5cGUoZGl2LCAnRWxlbWVudE5vZGUnKSkge1xuICAgIGxldCBbdGV4dDEsIHBdID0gZGl2LmNoaWxkcmVuO1xuICAgIGxvY0VxdWFsKHRleHQxLCAyLCAxMywgMiwgMTcpO1xuICAgIGxvY0VxdWFsKHAsIDIsIDE3LCAzLCAzMSk7XG5cbiAgICBpZiAoYXNzZXJ0Tm9kZVR5cGUocCwgJ0VsZW1lbnROb2RlJykpIHtcbiAgICAgIGxldCBbdGV4dDJdID0gcC5jaGlsZHJlbjtcbiAgICAgIGxvY0VxdWFsKHRleHQyLCAyLCAyMCwgMywgMjcpO1xuICAgIH1cbiAgfVxufSk7XG5cbnRlc3QoJ3doaXRlc3BhY2UgY29udHJvbCAtIHRyYWlsaW5nJywgZnVuY3Rpb24oKSB7XG4gIGxldCBhc3QgPSBwYXJzZShgXG4gIHt7I2lmIGZvb359fVxuICAgIDxkaXY+PC9kaXY+XG4gIHt7ZWxzZX59fVxuICAgIHt7YmFyfX1cbiAge3svaWZ9fWApO1xuXG4gIGxldCBbLCBpZkJsb2NrXSA9IGFzdC5ib2R5O1xuICBsb2NFcXVhbChpZkJsb2NrLCAyLCAyLCA2LCA5LCAnaWYgYmxvY2snKTtcblxuICBpZiAoYXNzZXJ0Tm9kZVR5cGUoaWZCbG9jaywgJ0Jsb2NrU3RhdGVtZW50JykpIHtcbiAgICBsZXQgW2Rpdl0gPSBpZkJsb2NrLnByb2dyYW0uYm9keTtcbiAgICBsb2NFcXVhbChkaXYsIDMsIDQsIDMsIDE1LCAnZGl2IGluc2lkZSB0cnV0aHkgaWYgYmxvY2snKTtcbiAgfVxufSk7XG5cbnRlc3QoXCJ3aGl0ZXNwYWNlIGNvbnRyb2wgLSAnZWxzZSBpZicgdHJhaWxpbmdcIiwgZnVuY3Rpb24oKSB7XG4gIGxldCBhc3QgPSBwYXJzZShgXG4gIHt7I2lmIGZvb319XG4gICAge3tiYXJ9fVxuICB7e2Vsc2UgaWYgYmF6fn19XG4gICAgPGRpdj48L2Rpdj5cbiAge3svaWZ9fWApO1xuXG4gIGxldCBbLCBpZkJsb2NrXSA9IGFzdC5ib2R5O1xuICBsb2NFcXVhbChpZkJsb2NrLCAyLCAyLCA2LCA5LCAnaWYgYmxvY2snKTtcbiAgaWYgKGFzc2VydE5vZGVUeXBlKGlmQmxvY2ssICdCbG9ja1N0YXRlbWVudCcpICYmIGFzc2VydE5vZGVUeXBlKGlmQmxvY2suaW52ZXJzZSwgJ0Jsb2NrJykpIHtcbiAgICBsZXQgW25lc3RlZElmQmxvY2tdID0gaWZCbG9jay5pbnZlcnNlLmJvZHk7XG4gICAgaWYgKFxuICAgICAgYXNzZXJ0Tm9kZVR5cGUobmVzdGVkSWZCbG9jaywgJ0Jsb2NrU3RhdGVtZW50JykgJiZcbiAgICAgIGFzc2VydE5vZGVUeXBlKG5lc3RlZElmQmxvY2sucHJvZ3JhbSwgJ0Jsb2NrJylcbiAgICApIHtcbiAgICAgIGxldCBbZGl2XSA9IG5lc3RlZElmQmxvY2sucHJvZ3JhbS5ib2R5O1xuICAgICAgbG9jRXF1YWwoZGl2LCA1LCA0LCA1LCAxNSwgJ2RpdiBpbnNpZGUgdHJ1dGh5IGVsc2UgaWYgYmxvY2snKTtcbiAgICB9XG4gIH1cbn0pO1xuXG50ZXN0KCd3aGl0ZXNwYWNlIGNvbnRyb2wgLSBsZWFkaW5nJywgZnVuY3Rpb24oKSB7XG4gIGxldCBhc3QgPSBwYXJzZShgXG4gIHt7fiNpZiBmb299fVxuICAgIDxkaXY+PC9kaXY+XG4gIHt7fmVsc2V9fVxuICAgIHt7YmFyfX1cbiAge3t+L2lmfX1gKTtcblxuICBsZXQgW2lmQmxvY2tdID0gYXN0LmJvZHk7XG4gIGxvY0VxdWFsKGlmQmxvY2ssIDIsIDIsIDYsIDEwLCAnaWYgYmxvY2snKTtcbiAgaWYgKGFzc2VydE5vZGVUeXBlKGlmQmxvY2ssICdCbG9ja1N0YXRlbWVudCcpKSB7XG4gICAgbGV0IFssIGRpdl0gPSBpZkJsb2NrLnByb2dyYW0uYm9keTtcbiAgICBsb2NFcXVhbChkaXYsIDMsIDQsIDMsIDE1LCAnZGl2IGluc2lkZSB0cnV0aHkgaWYgYmxvY2snKTtcbiAgfVxufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9