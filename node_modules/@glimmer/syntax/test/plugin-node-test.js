'use strict';

var _syntax = require('@glimmer/syntax');

var _util = require('../../util');

const { test } = QUnit;
QUnit.module('[glimmer-syntax] Plugins - AST Transforms');
test('function based AST plugins can be provided to the compiler', assert => {
    assert.expect(1);
    (0, _syntax.preprocess)('<div></div>', {
        plugins: {
            ast: [() => ({
                name: 'plugin-a',
                visitor: {
                    Program() {
                        assert.ok(true, 'transform was called!');
                    }
                }
            })]
        }
    });
});
test('plugins are provided the syntax package', assert => {
    assert.expect(1);
    (0, _syntax.preprocess)('<div></div>', {
        plugins: {
            ast: [({ syntax }) => {
                assert.equal(syntax.Walker, _syntax.Walker);
                return { name: 'plugin-a', visitor: {} };
            }]
        }
    });
});
test('can support the legacy AST transform API via ASTPlugin', assert => {
    function ensurePlugin(FunctionOrPlugin) {
        if (FunctionOrPlugin.prototype && FunctionOrPlugin.prototype.transform) {
            return env => {
                return {
                    name: 'plugin-a',
                    visitor: {
                        Program(node) {
                            let plugin = new FunctionOrPlugin(env);
                            plugin.syntax = env.syntax;
                            return plugin.transform(node);
                        }
                    }
                };
            };
        } else {
            return FunctionOrPlugin;
        }
    }
    class Plugin {
        transform(program) {
            assert.ok(true, 'transform was called!');
            return program;
        }
    }
    (0, _syntax.preprocess)('<div></div>', {
        plugins: {
            ast: [ensurePlugin(Plugin)]
        }
    });
});
const FIRST_PLUGIN = new WeakMap();
const SECOND_PLUGIN = new WeakMap();
const THIRD_PLUGIN = new WeakMap();
test('AST plugins can be chained', assert => {
    assert.expect(3);
    let first = () => {
        return {
            name: 'first',
            visitor: {
                Program(program) {
                    FIRST_PLUGIN.set(program, true);
                }
            }
        };
    };
    let second = () => {
        return {
            name: 'second',
            visitor: {
                Program(node) {
                    assert.equal(FIRST_PLUGIN.get(node), true, 'AST from first plugin is passed to second');
                    SECOND_PLUGIN.set(node, true);
                }
            }
        };
    };
    let third = () => {
        return {
            name: 'third',
            visitor: {
                Program(node) {
                    assert.equal(SECOND_PLUGIN.get(node), true, 'AST from second plugin is passed to third');
                    THIRD_PLUGIN.set(node, true);
                }
            }
        };
    };
    let ast = (0, _syntax.preprocess)('<div></div>', {
        plugins: {
            ast: [first, second, third]
        }
    });
    assert.equal(THIRD_PLUGIN.get(ast), true, 'return value from last AST transform is used');
});
test('AST plugins can access meta from environment', assert => {
    assert.expect(2);
    const locator = {
        module: 'template/module/name',
        name: 'default'
    };
    let hasExposedEnvMeta = env => {
        return {
            name: 'exposedMetaTemplateData',
            visitor: {
                Program() {
                    const { meta } = env;
                    const { module, name } = (0, _util.expect)(meta, 'expected meta to not be null');
                    assert.equal(module, 'template/module/name', 'module was passed in the meta enviornment property');
                    assert.equal(name, 'default', 'name was passed in the meta enviornment property');
                }
            }
        };
    };
    (0, _syntax.preprocess)('<div></div>', {
        meta: locator,
        plugins: {
            ast: [hasExposedEnvMeta]
        }
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,