'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.strip = strip;

var _ = require('..');

var _support = require('./support');

const test = QUnit.test;
QUnit.module('[glimmer-syntax] Parser - AST');
test('a simple piece of content', function () {
    let t = 'some content';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('some content')]));
});
test('self-closed element', function () {
    let t = '<g />';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('g/')]));
});
test('elements can have empty attributes', function () {
    let t = '<img id="">';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('img', { attrs: [_.builders.attr('id', _.builders.text(''))] })]));
});
test('disallowed quote in element space is rejected', function (assert) {
    let t = '<img foo="bar"" >';
    assert.throws(() => {
        (0, _.preprocess)(t);
    }, /Syntax error at line 1 col 14: " is not a valid character within attribute names/);
});
test('disallowed equals sign in element space is rejected', function (assert) {
    let t = '<img =foo >';
    assert.throws(() => {
        (0, _.preprocess)(t);
    }, /Syntax error at line 1 col 5: attribute name cannot start with equals sign/);
});
test('svg content', function () {
    let t = '<svg></svg>';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('svg')]));
});
test('html content with html content inline', function () {
    let t = '<div><p></p></div>';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('div', ['body', _.builders.element('p')])]));
});
test('html content with svg content inline', function () {
    let t = '<div><svg></svg></div>';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('div', ['body', _.builders.element('svg')])]));
});
let integrationPoints = ['foreignObject', 'desc', 'title'];
function buildIntegrationPointTest(integrationPoint) {
    return function integrationPointTest() {
        let t = '<svg><' + integrationPoint + '><div></div></' + integrationPoint + '></svg>';
        (0, _support.astEqual)(t, _.builders.program([_.builders.element('svg', ['body', _.builders.element(integrationPoint, ['body', _.builders.element('div')])])]));
    };
}
for (let i = 0, length = integrationPoints.length; i < length; i++) {
    test('svg content with html content inline for ' + integrationPoints[i], buildIntegrationPointTest(integrationPoints[i]));
}
test('a piece of content with HTML', function () {
    let t = 'some <div>content</div> done';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('some '), _.builders.element('div', ['body', _.builders.text('content')]), _.builders.text(' done')]));
});
test('a piece of Handlebars with HTML', function () {
    let t = 'some <div>{{content}}</div> done';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('some '), _.builders.element('div', ['body', _.builders.mustache(_.builders.path('content'))]), _.builders.text(' done')]));
});
test('Handlebars embedded in an attribute (quoted)', function () {
    let t = 'some <div class="{{foo}}">content</div> done';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('some '), _.builders.element('div', ['attrs', ['class', _.builders.concat([_.builders.mustache('foo')])]], ['body', _.builders.text('content')]), _.builders.text(' done')]));
});
test('Handlebars embedded in an attribute (unquoted)', function () {
    let t = 'some <div class={{foo}}>content</div> done';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('some '), _.builders.element('div', ['attrs', ['class', _.builders.mustache(_.builders.path('foo'))]], ['body', _.builders.text('content')]), _.builders.text(' done')]));
});
test('Handlebars embedded in an attribute of a self-closing tag (unqouted)', function () {
    let t = '<input value={{foo}}/>';
    let element = _.builders.element('input/', ['attrs', ['value', _.builders.mustache(_.builders.path('foo'))]]);
    (0, _support.astEqual)(t, _.builders.program([element]));
});
test('Handlebars embedded in an attribute (sexprs)', function () {
    let t = 'some <div class="{{foo (foo "abc")}}">content</div> done';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('some '), _.builders.element('div', ['attrs', ['class', _.builders.concat([_.builders.mustache(_.builders.path('foo'), [_.builders.sexpr(_.builders.path('foo'), [_.builders.string('abc')])])])]], ['body', _.builders.text('content')]), _.builders.text(' done')]));
});
test('Handlebars embedded in an attribute with other content surrounding it', function () {
    let t = 'some <a href="http://{{link}}/">content</a> done';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('some '), _.builders.element('a', ['attrs', ['href', _.builders.concat([_.builders.text('http://'), _.builders.mustache('link'), _.builders.text('/')])]], ['body', _.builders.text('content')]), _.builders.text(' done')]));
});
test('A more complete embedding example', function () {
    let t = "{{embed}} {{some 'content'}} " + "<div class='{{foo}} {{bind-class isEnabled truthy='enabled'}}'>{{ content }}</div>" + " {{more 'embed'}}";
    (0, _support.astEqual)(t, _.builders.program([_.builders.mustache(_.builders.path('embed')), _.builders.text(' '), _.builders.mustache(_.builders.path('some'), [_.builders.string('content')]), _.builders.text(' '), _.builders.element('div', ['attrs', ['class', _.builders.concat([_.builders.mustache('foo'), _.builders.text(' '), _.builders.mustache('bind-class', [_.builders.path('isEnabled')], _.builders.hash([_.builders.pair('truthy', _.builders.string('enabled'))]))])]], ['body', _.builders.mustache(_.builders.path('content'))]), _.builders.text(' '), _.builders.mustache(_.builders.path('more'), [_.builders.string('embed')])]));
});
test('Simple embedded block helpers', function () {
    let t = '{{#if foo}}<div>{{content}}</div>{{/if}}';
    (0, _support.astEqual)(t, _.builders.program([_.builders.block(_.builders.path('if'), [_.builders.path('foo')], _.builders.hash(), _.builders.blockItself([_.builders.element('div', ['body', _.builders.mustache(_.builders.path('content'))])]))]));
});
test('Involved block helper', function () {
    let t = '<p>hi</p> content {{#testing shouldRender}}<p>Appears!</p>{{/testing}} more <em>content</em> here';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('p', ['body', _.builders.text('hi')]), _.builders.text(' content '), _.builders.block(_.builders.path('testing'), [_.builders.path('shouldRender')], _.builders.hash(), _.builders.blockItself([_.builders.element('p', ['body', _.builders.text('Appears!')])])), _.builders.text(' more '), _.builders.element('em', ['body', _.builders.text('content')]), _.builders.text(' here')]));
});
test('Element modifiers', function () {
    let t = "<p {{action 'boom'}} class='bar'>Some content</p>";
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('p', ['attrs', ['class', 'bar']], ['modifiers', ['action', [_.builders.string('boom')]]], ['body', _.builders.text('Some content')])]));
});
test('Tokenizer: MustacheStatement encountered in beforeAttributeName state', function () {
    let t = '<input {{bar}}>';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('input', ['modifiers', 'bar'])]));
});
test('Tokenizer: MustacheStatement encountered in attributeName state', function () {
    let t = '<input foo{{bar}}>';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('input', ['attrs', ['foo', '']], ['modifiers', ['bar']])]));
});
test('Tokenizer: MustacheStatement encountered in afterAttributeName state', function () {
    let t = '<input foo {{bar}}>';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('input', ['attrs', ['foo', '']], ['modifiers', 'bar'])]));
});
test('Tokenizer: MustacheStatement encountered in afterAttributeValue state', function () {
    let t = '<input foo=1 {{bar}}>';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('input', ['attrs', ['foo', '1']], ['modifiers', ['bar']])]));
});
test('Tokenizer: MustacheStatement encountered in afterAttributeValueQuoted state', function () {
    let t = "<input foo='1'{{bar}}>";
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('input', ['attrs', ['foo', '1']], ['modifiers', 'bar'])]));
});
test('Stripping - mustaches', function () {
    let t = 'foo {{~content}} bar';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('foo'), _.builders.mustache(_.builders.path('content'), undefined, undefined, undefined, undefined, {
        open: true,
        close: false
    }), _.builders.text(' bar')]));
    t = 'foo {{content~}} bar';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('foo '), _.builders.mustache(_.builders.path('content'), undefined, undefined, undefined, undefined, {
        open: false,
        close: true
    }), _.builders.text('bar')]));
});
test('Stripping - blocks', function () {
    let t = 'foo {{~#wat}}{{/wat}} bar';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('foo'), _.builders.block(_.builders.path('wat'), [], _.builders.hash(), _.builders.blockItself(), undefined, undefined, {
        open: true,
        close: false
    }), _.builders.text(' bar')]));
    t = 'foo {{#wat}}{{/wat~}} bar';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('foo '), _.builders.block(_.builders.path('wat'), [], _.builders.hash(), _.builders.blockItself(), undefined, undefined, undefined, undefined, { open: false, close: true }), _.builders.text('bar')]));
});
test('Stripping - programs', function () {
    let t = '{{#wat~}} foo {{else}}{{/wat}}';
    (0, _support.astEqual)(t, _.builders.program([_.builders.block(_.builders.path('wat'), [], _.builders.hash(), _.builders.blockItself([_.builders.text('foo ')]), _.builders.blockItself(), undefined, { open: false, close: true })]));
    t = '{{#wat}} foo {{~else}}{{/wat}}';
    (0, _support.astEqual)(t, _.builders.program([_.builders.block(_.builders.path('wat'), [], _.builders.hash(), _.builders.blockItself([_.builders.text(' foo')]), _.builders.blockItself(), undefined, undefined, { open: true, close: false })]));
    t = '{{#wat}}{{else~}} foo {{/wat}}';
    (0, _support.astEqual)(t, _.builders.program([_.builders.block(_.builders.path('wat'), [], _.builders.hash(), _.builders.blockItself(), _.builders.blockItself([_.builders.text('foo ')]), undefined, undefined, { open: false, close: true })]));
    t = '{{#wat}}{{else}} foo {{~/wat}}';
    (0, _support.astEqual)(t, _.builders.program([_.builders.block(_.builders.path('wat'), [], _.builders.hash(), _.builders.blockItself(), _.builders.blockItself([_.builders.text(' foo')]), undefined, undefined, undefined, { open: true, close: false })]));
});
test('Stripping - removes unnecessary text nodes', function () {
    let t = '{{#each~}}\n  <li> foo </li>\n{{~/each}}';
    (0, _support.astEqual)(t, _.builders.program([_.builders.block(_.builders.path('each'), [], _.builders.hash(), _.builders.blockItself([_.builders.element('li', ['body', _.builders.text(' foo ')])]), null, undefined, { open: false, close: true }, undefined, { open: true, close: false })]));
});
test('Whitespace control - linebreaks after blocks removed by default', function () {
    let t = '{{#each}}\n  <li> foo </li>\n{{/each}}';
    (0, _support.astEqual)(t, _.builders.program([_.builders.block(_.builders.path('each'), [], _.builders.hash(), _.builders.blockItself([_.builders.text('  '), _.builders.element('li', ['body', _.builders.text(' foo ')]), _.builders.text('\n')]), null)]));
});
test('Whitespace control - preserve all whitespace if config is set', function () {
    let t = '{{#each}}\n  <li> foo </li>\n{{/each}}';
    (0, _support.astEqual)(t, _.builders.program([_.builders.block(_.builders.path('each'), [], _.builders.hash(), _.builders.blockItself([_.builders.text('\n  '), _.builders.element('li', ['body', _.builders.text(' foo ')]), _.builders.text('\n')]), null)]), undefined, {
        parseOptions: { ignoreStandalone: true }
    });
});
// TODO: Make these throw an error.
//test("Awkward mustache in unquoted attribute value", function() {
//  let t = "<div class=a{{foo}}></div>";
//  astEqual(t, b.program([
//    b.element('div', [ b.attr('class', concat([b.string("a"), b.sexpr([b.path('foo')])])) ])
//  ]));
//
//  t = "<div class=a{{foo}}b></div>";
//  astEqual(t, b.program([
//    b.element('div', [ b.attr('class', concat([b.string("a"), b.sexpr([b.path('foo')]), b.string("b")])) ])
//  ]));
//
//  t = "<div class={{foo}}b></div>";
//  astEqual(t, b.program([
//    b.element('div', [ b.attr('class', concat([b.sexpr([b.path('foo')]), b.string("b")])) ])
//  ]));
//});
test('an HTML comment', function () {
    let t = 'before <!-- some comment --> after';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('before '), _.builders.comment(' some comment '), _.builders.text(' after')]));
});
test('a Handlebars comment inside an HTML comment', function () {
    let t = 'before <!-- some {{! nested thing }} comment --> after';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('before '), _.builders.comment(' some {{! nested thing }} comment '), _.builders.text(' after')]));
});
test('a Handlebars comment', function () {
    let t = 'before {{! some comment }} after';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('before '), _.builders.mustacheComment(' some comment '), _.builders.text(' after')]));
});
test('a Handlebars comment in proper element space', function () {
    let t = 'before <div {{! some comment }} data-foo="bar" {{! other comment }}></div> after';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('before '), _.builders.element('div', ['attrs', ['data-foo', _.builders.text('bar')]], ['comments', _.builders.mustacheComment(' some comment '), _.builders.mustacheComment(' other comment ')]), _.builders.text(' after')]));
});
test('a Handlebars comment in invalid element space', function (assert) {
    assert.throws(() => {
        (0, _.preprocess)('\nbefore <div \n  a{{! some comment }} data-foo="bar"></div> after');
    }, /Using a Handlebars comment when in the `attributeName` state is not supported: " some comment " on line 3:3/);
    assert.throws(() => {
        (0, _.preprocess)('\nbefore <div \n  a={{! some comment }} data-foo="bar"></div> after');
    }, /Using a Handlebars comment when in the `beforeAttributeValue` state is not supported: " some comment " on line 3:4/);
    assert.throws(() => {
        (0, _.preprocess)('\nbefore <div \n  a="{{! some comment }}" data-foo="bar"></div> after');
    }, /Using a Handlebars comment when in the `attributeValueDoubleQuoted` state is not supported: " some comment " on line 3:5/);
});
test('allow {{null}} to be passed as helper name', function () {
    let ast = (0, _.preprocess)('{{null}}');
    (0, _support.astEqual)(ast, _.builders.program([_.builders.mustache(_.builders.null())]));
});
test('allow {{null}} to be passed as a param', function () {
    let ast = (0, _.preprocess)('{{foo null}}');
    (0, _support.astEqual)(ast, _.builders.program([_.builders.mustache(_.builders.path('foo'), [_.builders.null()])]));
});
test('allow {{undefined}} to be passed as helper name', function () {
    let ast = (0, _.preprocess)('{{undefined}}');
    (0, _support.astEqual)(ast, _.builders.program([_.builders.mustache(_.builders.undefined())]));
});
test('allow {{undefined}} to be passed as a param', function () {
    let ast = (0, _.preprocess)('{{foo undefined}}');
    (0, _support.astEqual)(ast, _.builders.program([_.builders.mustache(_.builders.path('foo'), [_.builders.undefined()])]));
});
test('Handlebars partial should error', function (assert) {
    assert.throws(() => {
        (0, _.preprocess)('{{> foo}}');
    }, Error(`Handlebars partials are not supported: "{{> foo" at L1:C0`));
});
test('Handlebars partial block should error', function (assert) {
    assert.throws(() => {
        (0, _.preprocess)('{{#> foo}}{{/foo}}');
    }, new Error(`Handlebars partial blocks are not supported: "{{#> foo" at L1:C0`));
});
test('Handlebars decorator should error', function (assert) {
    assert.throws(() => {
        (0, _.preprocess)('{{* foo}}');
    }, new Error(`Handlebars decorators are not supported: "{{* foo" at L1:C0`));
});
test('Handlebars decorator block should error', function (assert) {
    assert.throws(() => {
        (0, _.preprocess)('{{#* foo}}{{/foo}}');
    }, new Error(`Handlebars decorator blocks are not supported: "{{#* foo" at L1:C0`));
});
test('disallowed mustaches in the tagName space', function (assert) {
    assert.throws(() => {
        (0, _.preprocess)('<{{"asdf"}}></{{"asdf"}}>');
    }, /Cannot use mustaches in an elements tagname: `{{"asdf"` at L1:C1/);
    assert.throws(() => {
        (0, _.preprocess)('<input{{bar}}>');
    }, /Cannot use mustaches in an elements tagname: `{{bar` at L1:C6/);
});
test('mustache immediately followed by self closing tag does not error', function () {
    let ast = (0, _.preprocess)('<FooBar data-foo={{blah}}/>');
    let element = _.builders.element('FooBar/', ['attrs', ['data-foo', _.builders.mustache('blah')]]);
    (0, _support.astEqual)(ast, _.builders.program([element]));
});
QUnit.dump.maxDepth = 100;
test('named blocks', () => {
    let ast = (0, _.preprocess)(strip`
    <Tab>
      <:header>
        It's a header!
      </:header>

      <:body as |contents|>
        <div>{{contents}}</div>
      </:body>
    </Tab>
  `);
    let element = _.builders.element('Tab', ['body', _.builders.element(':header', ['body', _.builders.text(`It's a header!`)]), _.builders.element(':body', ['body', _.builders.element('div', ['body', _.builders.mustache('contents')])], ['as', 'contents'])]);
    (0, _support.astEqual)(ast, _.builders.program([element]));
});
test('path expression with "dangling dot" throws error', function (assert) {
    assert.throws(() => {
        (0, _.preprocess)('{{if foo. bar baz}}');
    }, /'\.' is not a supported path in Glimmer; check for a path with a trailing '\.' at L1:C8/);
});
function strip(strings, ...args) {
    return strings.map((str, i) => {
        return `${str.split('\n').map(s => s.trim()).join('')}${args[i] ? args[i] : ''}`;
    }).join('');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC90ZXN0L3BhcnNlci1ub2RlLXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFtb0JnQixLLEdBQUEsSzs7OztBQWpvQmhCOztBQUVBLE1BQU0sT0FBTyxNQUFNLElBQW5CO0FBRUEsTUFBTSxNQUFOLENBQWEsK0JBQWI7QUFFQSxLQUFLLDJCQUFMLEVBQWtDLFlBQUE7QUFDaEMsUUFBSSxJQUFJLGNBQVI7QUFDQSwyQkFBUyxDQUFULEVBQVksV0FBRSxPQUFGLENBQVUsQ0FBQyxXQUFFLElBQUYsQ0FBTyxjQUFQLENBQUQsQ0FBVixDQUFaO0FBQ0QsQ0FIRDtBQUtBLEtBQUsscUJBQUwsRUFBNEIsWUFBQTtBQUMxQixRQUFJLElBQUksT0FBUjtBQUNBLDJCQUFTLENBQVQsRUFBWSxXQUFFLE9BQUYsQ0FBVSxDQUFDLFdBQUUsT0FBRixDQUFVLElBQVYsQ0FBRCxDQUFWLENBQVo7QUFDRCxDQUhEO0FBS0EsS0FBSyxvQ0FBTCxFQUEyQyxZQUFBO0FBQ3pDLFFBQUksSUFBSSxhQUFSO0FBQ0EsMkJBQVMsQ0FBVCxFQUFZLFdBQUUsT0FBRixDQUFVLENBQUMsV0FBRSxPQUFGLENBQVUsS0FBVixFQUFpQixFQUFFLE9BQU8sQ0FBQyxXQUFFLElBQUYsQ0FBTyxJQUFQLEVBQWEsV0FBRSxJQUFGLENBQU8sRUFBUCxDQUFiLENBQUQsQ0FBVCxFQUFqQixDQUFELENBQVYsQ0FBWjtBQUNELENBSEQ7QUFLQSxLQUFLLCtDQUFMLEVBQXNELFVBQVMsTUFBVCxFQUFlO0FBQ25FLFFBQUksSUFBSSxtQkFBUjtBQUNBLFdBQU8sTUFBUCxDQUFjLE1BQUs7QUFDakIsMEJBQU0sQ0FBTjtBQUNELEtBRkQsRUFFRyxrRkFGSDtBQUdELENBTEQ7QUFPQSxLQUFLLHFEQUFMLEVBQTRELFVBQVMsTUFBVCxFQUFlO0FBQ3pFLFFBQUksSUFBSSxhQUFSO0FBQ0EsV0FBTyxNQUFQLENBQWMsTUFB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TyxVQUFQLENBSEYsQ0FINkIsQ0FBakIsQ0FBZDtBQVNBLDJCQUFTLEdBQVQsRUFBYyxXQUFFLE9BQUYsQ0FBVSxDQUFDLE9BQUQsQ0FBVixDQUFkO0FBQ0QsQ0F2QkQ7QUF5QkEsS0FBSyxrREFBTCxFQUF5RCxVQUFTLE1BQVQsRUFBZTtBQUN0RSxXQUFPLE1BQVAsQ0FBYyxNQUFLO0FBQ2pCLDBCQUFNLHFCQUFOO0FBQ0QsS0FGRCxFQUVHLHlGQUZIO0FBR0QsQ0FKRDtBQU1NLFNBQVUsS0FBVixDQUFnQixPQUFoQixFQUErQyxHQUFHLElBQWxELEVBQWdFO0FBQ3BFLFdBQU8sUUFDSixHQURJLENBQ0EsQ0FBQyxHQUFELEVBQWMsQ0FBZCxLQUEyQjtBQUM5QixlQUFPLEdBQUcsSUFDUCxLQURPLENBQ0QsSUFEQyxFQUVQLEdBRk8sQ0FFSCxLQUFLLEVBQUUsSUFBRixFQUZGLEVBR1AsSUFITyxDQUdGLEVBSEUsQ0FHQyxHQUFHLEtBQUssQ0FBTCxJQUFVLEtBQUssQ0FBTCxDQUFWLEdBQW9CLEVBQUUsRUFIcEM7QUFJRCxLQU5JLEVBT0osSUFQSSxDQU9DLEVBUEQsQ0FBUDtBQVFEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJlcHJvY2VzcyBhcyBwYXJzZSwgYnVpbGRlcnMgYXMgYiB9IGZyb20gJy4uJztcblxuaW1wb3J0IHsgYXN0RXF1YWwgfSBmcm9tICcuL3N1cHBvcnQnO1xuXG5jb25zdCB0ZXN0ID0gUVVuaXQudGVzdDtcblxuUVVuaXQubW9kdWxlKCdbZ2xpbW1lci1zeW50YXhdIFBhcnNlciAtIEFTVCcpO1xuXG50ZXN0KCdhIHNpbXBsZSBwaWVjZSBvZiBjb250ZW50JywgZnVuY3Rpb24oKSB7XG4gIGxldCB0ID0gJ3NvbWUgY29udGVudCc7XG4gIGFzdEVxdWFsKHQsIGIucHJvZ3JhbShbYi50ZXh0KCdzb21lIGNvbnRlbnQnKV0pKTtcbn0pO1xuXG50ZXN0KCdzZWxmLWNsb3NlZCBlbGVtZW50JywgZnVuY3Rpb24oKSB7XG4gIGxldCB0ID0gJzxnIC8+JztcbiAgYXN0RXF1YWwodCwgYi5wcm9ncmFtKFtiLmVsZW1lbnQoJ2cvJyldKSk7XG59KTtcblxudGVzdCgnZWxlbWVudHMgY2FuIGhhdmUgZW1wdHkgYXR0cmlidXRlcycsIGZ1bmN0aW9uKCkge1xuICBsZXQgdCA9ICc8aW1nIGlkPVwiXCI+JztcbiAgYXN0RXF1YWwodCwgYi5wcm9ncmFtKFtiLmVsZW1lbnQoJ2ltZycsIHsgYXR0cnM6IFtiLmF0dHIoJ2lkJywgYi50ZXh0KCcnKSldIH0pXSkpO1xufSk7XG5cbnRlc3QoJ2Rpc2FsbG93ZWQgcXVvdGUgaW4gZWxlbWVudCBzcGFjZSBpcyByZWplY3RlZCcsIGZ1bmN0aW9uKGFzc2VydCkge1xuICBsZXQgdCA9ICc8aW1nIGZvbz1cImJhclwiXCIgPic7XG4gIGFzc2VydC50aHJvd3MoKCkgPT4ge1xuICAgIHBhcnNlKHQpO1xuICB9LCAvU3ludGF4IGVycm9yIGF0IGxpbmUgMSBjb2wgMTQ6IFwiIGlzIG5vdCBhIHZhbGlkIGNoYXJhY3RlciB3aXRoaW4gYXR0cmlidXRlIG5hbWVzLyk7XG59KTtcblxudGVzdCgnZGlzYWxsb3dlZCBlcXVhbHMgc2lnbiBpbiBlbGVtZW50IHNwYWNlIGlzIHJlamVjdGVkJywgZnVuY3Rpb24oYXNzZXJ0KSB7XG4gIGxldCB0ID0gJzxpbWcgPWZvbyA+JztcbiAgYXNzZXJ0LnRocm93cygoKSA9PiB7XG4gICAgcGFyc2UodCk7XG4gIH0sIC9TeW50YXggZXJyb3IgYXQgbGluZSAxIGNvbCA1OiBhdHRyaWJ1dGUgbmFtZSBjYW5ub3Qgc3RhcnQgd2l0aCBlcXVhbHMgc2lnbi8pO1xufSk7XG5cbnRlc3QoJ3N2ZyBjb250ZW50JywgZnVuY3Rpb24oKSB7XG4gIGxldCB0ID0gJzxzdmc+PC9zdmc+JztcbiAgYXN0RXF1YWwodCwgYi5wcm9ncmFtKFtiLmVsZW1lbnQoJ3N2ZycpXSkpO1xufSk7XG5cbnRlc3QoJ2h0bWwgY29udGVudCB3aXRoIGh0bWwgY29udGVudCBpbmxpbmUnLCBmdW5jdGlvbigpIHtcbiAgbGV0IHQgPSAnPGRpdj48cD48L3A+PC9kaXY+JztcbiAgYXN0RXF1YWwodCwgYi5wcm9ncmFtKFtiLmVsZW1lbnQoJ2RpdicsIFsnYm9keScsIGIuZWxlbWVudCgncCcpXSldKSk7XG59KTtcblxudGVzdCgnaHRtbCBjb250ZW50IHdpdGggc3ZnIGNvbnRlbnQgaW5saW5lJywgZnVuY3Rpb24oKSB7XG4gIGxldCB0ID0gJzxkaXY+PHN2Zz48L3N2Zz48L2Rpdj4nO1xuICBhc3RFcXVhbCh0LCBiLnByb2dyYW0oW2IuZWxlbWVudCgnZGl2JywgWydib2R5JywgYi5lbGVtZW50KCdzdmcnKV0pXSkpO1xufSk7XG5cbmxldCBpbnRlZ3JhdGlvblBvaW50cyA9IFsnZm9yZWlnbk9iamVjdCcsICdkZXNjJywgJ3RpdGxlJ107XG5mdW5jdGlvbiBidWlsZEludGVncmF0aW9uUG9pbnRUZXN0KGludGVncmF0aW9uUG9pbnQ6IHN0cmluZykge1xuICByZXR1cm4gZnVuY3Rpb24gaW50ZWdyYXRpb25Qb2ludFRlc3QoKSB7XG4gICAgbGV0IHQgPSAnPHN2Zz48JyArIGludGVncmF0aW9uUG9pbnQgKyAnPjxkaXY+PC9kaXY+PC8nICsgaW50ZWdyYXRpb25Qb2ludCArICc+PC9zdmc+JztcbiAgICBhc3RFcXVhbChcbiAgICAgIHQsXG4gICAgICBiLnByb2dyYW0oW1xuICAgICAgICBiLmVsZW1lbnQoJ3N2ZycsIFsnYm9keScsIGIuZWxlbWVudChpbnRlZ3JhdGlvblBvaW50LCBbJ2JvZHknLCBiLmVsZW1lbnQoJ2RpdicpXSldKSxcbiAgICAgIF0pXG4gICAgKTtcbiAgfTtcbn1cbmZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBpbnRlZ3JhdGlvblBvaW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICB0ZXN0KFxuICAgICdzdmcgY29udGVudCB3aXRoIGh0bWwgY29udGVudCBpbmxpbmUgZm9yICcgKyBpbnRlZ3JhdGlvblBvaW50c1tpXSxcbiAgICBidWlsZEludGVncmF0aW9uUG9pbnRUZXN0KGludGVncmF0aW9uUG9pbnRzW2ldKVxuICApO1xufVxuXG50ZXN0KCdhIHBpZWNlIG9mIGNvbnRlbnQgd2l0aCBIVE1MJywgZnVuY3Rpb24oKSB7XG4gIGxldCB0ID0gJ3NvbWUgPGRpdj5jb250ZW50PC9kaXY+IGRvbmUnO1xuICBhc3RFcXVhbChcbiAgICB0LFxuICAgIGIucHJvZ3JhbShbYi50ZXh0KCdzb21lICcpLCBiLmVsZW1lbnQoJ2RpdicsIFsnYm9keScsIGIudGV4dCgnY29udGVudCcpXSksIGIudGV4dCgnIGRvbmUnKV0pXG4gICk7XG59KTtcblxudGVzdCgnYSBwaWVjZSBvZiBIYW5kbGViYXJzIHdpdGggSFRNTCcsIGZ1bmN0aW9uKCkge1xuICBsZXQgdCA9ICdzb21lIDxkaXY+e3tjb250ZW50fX08L2Rpdj4gZG9uZSc7XG4gIGFzdEVxdWFsKFxuICAgIHQsXG4gICAgYi5wcm9ncmFtKFtcbiAgICAgIGIudGV4dCgnc29tZSAnKSxcbiAgICAgIGIuZWxlbWVudCgnZGl2JywgWydib2R5JywgYi5tdXN0YWNoZShiLnBhdGgoJ2NvbnRlbnQnKSldKSxcbiAgICAgIGIudGV4dCgnIGRvbmUnKSxcbiAgICBdKVxuICApO1xufSk7XG5cbnRlc3QoJ0hhbmRsZWJhcnMgZW1iZWRkZWQgaW4gYW4gYXR0cmlidXRlIChxdW90ZWQpJywgZnVuY3Rpb24oKSB7XG4gIGxldCB0ID0gJ3NvbWUgPGRpdiBjbGFzcz1cInt7Zm9vfX1cIj5jb250ZW50PC9kaXY+IGRvbmUnO1xuICBhc3RFcXVhbChcbiAgICB0LFxuICAgIGIucHJvZ3JhbShbXG4gICAgICBiLnRleHQoJ3NvbWUgJyksXG4gICAgICBiLmVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICBbJ2F0dHJzJywgWydjbGFzcycsIGIuY29uY2F0KFtiLm11c3RhY2hlKCdmb28nKV0pXV0sXG4gICAgICAgIFsnYm9keScsIGIudGV4dCgnY29udGVudCcpXVxuICAgICAgKSxcbiAgICAgIGIudGV4dCgnIGRvbmUnKSxcbiAgICBdKVxuICApO1xufSk7XG5cbnRlc3QoJ0hhbmRsZWJhcnMgZW1iZWRkZWQgaW4gYW4gYXR0cmlidXRlICh1bnF1b3RlZCknLCBmdW5jdGlvbigpIHtcbiAgbGV0IHQgPSAnc29tZSA8ZGl2IGNsYXNzPXt7Zm9vfX0+Y29udGVudDwvZGl2PiBkb25lJztcbiAgYXN0RXF1YWwoXG4gICAgdCxcbiAgICBiLnByb2dyYW0oW1xuICAgICAgYi50ZXh0KCdzb21lICcpLFxuICAgICAgYi5lbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgWydhdHRycycsIFsnY2xhc3MnLCBiLm11c3RhY2hlKGIucGF0aCgnZm9vJykpXV0sXG4gICAgICAgIFsnYm9keScsIGIudGV4dCgnY29udGVudCcpXVxuICAgICAgKSxcbiAgICAgIGIudGV4dCgnIGRvbmUnKSxcbiAgICBdKVxuICApO1xufSk7XG5cbnRlc3QoJ0hhbmRsZWJhcnMgZW1iZWRkZWQgaW4gYW4gYXR0cmlidXRlIG9mIGEgc2VsZi1jbG9zaW5nIHRhZyAodW5xb3V0ZWQpJywgZnVuY3Rpb24oKSB7XG4gIGxldCB0ID0gJzxpbnB1dCB2YWx1ZT17e2Zvb319Lz4nO1xuXG4gIGxldCBlbGVtZW50ID0gYi5lbGVtZW50KCdpbnB1dC8nLCBbJ2F0dHJzJywgWyd2YWx1ZScsIGIubXVzdGFjaGUoYi5wYXRoKCdmb28nKSldXSk7XG4gIGFzdEVxdWFsKHQsIGIucHJvZ3JhbShbZWxlbWVudF0pKTtcbn0pO1xuXG50ZXN0KCdIYW5kbGViYXJzIGVtYmVkZGVkIGluIGFuIGF0dHJpYnV0ZSAoc2V4cHJzKScsIGZ1bmN0aW9uKCkge1xuICBsZXQgdCA9ICdzb21lIDxkaXYgY2xhc3M9XCJ7e2ZvbyAoZm9vIFwiYWJjXCIpfX1cIj5jb250ZW50PC9kaXY+IGRvbmUnO1xuICBhc3RFcXVhbChcbiAgICB0LFxuICAgIGIucHJvZ3JhbShbXG4gICAgICBiLnRleHQoJ3NvbWUgJyksXG4gICAgICBiLmVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICBbXG4gICAgICAgICAgJ2F0dHJzJyxcbiAgICAgICAgICBbXG4gICAgICAgICAgICAnY2xhc3MnLFxuICAgICAgICAgICAgYi5jb25jYXQoW2IubXVzdGFjaGUoYi5wYXRoKCdmb28nKSwgW2Iuc2V4cHIoYi5wYXRoKCdmb28nKSwgW2Iuc3RyaW5nKCdhYmMnKV0pXSldKSxcbiAgICAgICAgICBdLFxuICAgICAgICBdLFxuICAgICAgICBbJ2JvZHknLCBiLnRleHQoJ2NvbnRlbnQnKV1cbiAgICAgICksXG4gICAgICBiLnRleHQoJyBkb25lJyksXG4gICAgXSlcbiAgKTtcbn0pO1xuXG50ZXN0KCdIYW5kbGViYXJzIGVtYmVkZGVkIGluIGFuIGF0dHJpYnV0ZSB3aXRoIG90aGVyIGNvbnRlbnQgc3Vycm91bmRpbmcgaXQnLCBmdW5jdGlvbigpIHtcbiAgbGV0IHQgPSAnc29tZSA8YSBocmVmPVwiaHR0cDovL3t7bGlua319L1wiPmNvbnRlbnQ8L2E+IGRvbmUnO1xuICBhc3RFcXVhbChcbiAgICB0LFxuICAgIGIucHJvZ3JhbShbXG4gICAgICBiLnRleHQoJ3NvbWUgJyksXG4gICAgICBiLmVsZW1lbnQoXG4gICAgICAgICdhJyxcbiAgICAgICAgWydhdHRycycsIFsnaHJlZicsIGIuY29uY2F0KFtiLnRleHQoJ2h0dHA6Ly8nKSwgYi5tdXN0YWNoZSgnbGluaycpLCBiLnRleHQoJy8nKV0pXV0sXG4gICAgICAgIFsnYm9keScsIGIudGV4dCgnY29udGVudCcpXVxuICAgICAgKSxcbiAgICAgIGIudGV4dCgnIGRvbmUnKSxcbiAgICBdKVxuICApO1xufSk7XG5cbnRlc3QoJ0EgbW9yZSBjb21wbGV0ZSBlbWJlZGRpbmcgZXhhbXBsZScsIGZ1bmN0aW9uKCkge1xuICBsZXQgdCA9XG4gICAgXCJ7e2VtYmVkfX0ge3tzb21lICdjb250ZW50J319IFwiICtcbiAgICBcIjxkaXYgY2xhc3M9J3t7Zm9vfX0ge3tiaW5kLWNsYXNzIGlzRW5hYmxlZCB0cnV0aHk9J2VuYWJsZWQnfX0nPnt7IGNvbnRlbnQgfX08L2Rpdj5cIiArXG4gICAgXCIge3ttb3JlICdlbWJlZCd9fVwiO1xuICBhc3RFcXVhbChcbiAgICB0LFxuICAgIGIucHJvZ3JhbShbXG4gICAgICBiLm11c3RhY2hlKGIucGF0aCgnZW1iZWQnKSksXG4gICAgICBiLnRleHQoJyAnKSxcbiAgICAgIGIubXVzdGFjaGUoYi5wYXRoKCdzb21lJyksIFtiLnN0cmluZygnY29udGVudCcpXSksXG4gICAgICBiLnRleHQoJyAnKSxcbiAgICAgIGIuZWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIFtcbiAgICAgICAgICAnYXR0cnMnLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgICdjbGFzcycsXG4gICAgICAgICAgICBiLmNvbmNhdChbXG4gICAgICAgICAgICAgIGIubXVzdGFjaGUoJ2ZvbycpLFxuICAgICAgICAgICAgICBiLnRleHQoJyAnKSxcbiAgICAgICAgICAgICAgYi5tdXN0YWNoZShcbiAgICAgICAgICAgICAgICAnYmluZC1jbGFzcycsXG4gICAgICAgICAgICAgICAgW2IucGF0aCgnaXNFbmFibGVkJyldLFxuICAgICAgICAgICAgICAgIGIuaGFzaChbYi5wYWlyKCd0cnV0aHknLCBiLnN0cmluZygnZW5hYmxlZCcpKV0pXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdLFxuICAgICAgICBdLFxuICAgICAgICBbJ2JvZHknLCBiLm11c3RhY2hlKGIucGF0aCgnY29udGVudCcpKV1cbiAgICAgICksXG4gICAgICBiLnRleHQoJyAnKSxcbiAgICAgIGIubXVzdGFjaGUoYi5wYXRoKCdtb3JlJyksIFtiLnN0cmluZygnZW1iZWQnKV0pLFxuICAgIF0pXG4gICk7XG59KTtcblxudGVzdCgnU2ltcGxlIGVtYmVkZGVkIGJsb2NrIGhlbHBlcnMnLCBmdW5jdGlvbigpIHtcbiAgbGV0IHQgPSAne3sjaWYgZm9vfX08ZGl2Pnt7Y29udGVudH19PC9kaXY+e3svaWZ9fSc7XG4gIGFzdEVxdWFsKFxuICAgIHQsXG4gICAgYi5wcm9ncmFtKFtcbiAgICAgIGIuYmxvY2soXG4gICAgICAgIGIucGF0aCgnaWYnKSxcbiAgICAgICAgW2IucGF0aCgnZm9vJyldLFxuICAgICAgICBiLmhhc2goKSxcbiAgICAgICAgYi5ibG9ja0l0c2VsZihbYi5lbGVtZW50KCdkaXYnLCBbJ2JvZHknLCBiLm11c3RhY2hlKGIucGF0aCgnY29udGVudCcpKV0pXSlcbiAgICAgICksXG4gICAgXSlcbiAgKTtcbn0pO1xuXG50ZXN0KCdJbnZvbHZlZCBibG9jayBoZWxwZXInLCBmdW5jdGlvbigpIHtcbiAgbGV0IHQgPVxuICAgICc8cD5oaTwvcD4gY29udGVudCB7eyN0ZXN0aW5nIHNob3VsZFJlbmRlcn19PHA+QXBwZWFycyE8L3A+e3svdGVzdGluZ319IG1vcmUgPGVtPmNvbnRlbnQ8L2VtPiBoZXJlJztcbiAgYXN0RXF1YWwoXG4gICAgdCxcbiAgICBiLnByb2dyYW0oW1xuICAgICAgYi5lbGVtZW50KCdwJywgWydib2R5JywgYi50ZXh0KCdoaScpXSksXG4gICAgICBiLnRleHQoJyBjb250ZW50ICcpLFxuICAgICAgYi5ibG9jayhcbiAgICAgICAgYi5wYXRoKCd0ZXN0aW5nJyksXG4gICAgICAgIFtiLnBhdGgoJ3Nob3VsZFJlbmRlcicpXSxcbiAgICAgICAgYi5oYXNoKCksXG4gICAgICAgIGIuYmxvY2tJdHNlbGYoW2IuZWxlbWVudCgncCcsIFsnYm9keScsIGIudGV4dCgnQXBwZWFycyEnKV0pXSlcbiAgICAgICksXG4gICAgICBiLnRleHQoJyBtb3JlICcpLFxuICAgICAgYi5lbGVtZW50KCdlbScsIFsnYm9keScsIGIudGV4dCgnY29udGVudCcpXSksXG4gICAgICBiLnRleHQoJyBoZXJlJyksXG4gICAgXSlcbiAgKTtcbn0pO1xuXG50ZXN0KCdFbGVtZW50IG1vZGlmaWVycycsIGZ1bmN0aW9uKCkge1xuICBsZXQgdCA9IFwiPHAge3thY3Rpb24gJ2Jvb20nfX0gY2xhc3M9J2Jhcic+U29tZSBjb250ZW50PC9wPlwiO1xuICBhc3RFcXVhbChcbiAgICB0LFxuICAgIGIucHJvZ3JhbShbXG4gICAgICBiLmVsZW1lbnQoXG4gICAgICAgICdwJyxcbiAgICAgICAgWydhdHRycycsIFsnY2xhc3MnLCAnYmFyJ11dLFxuICAgICAgICBbJ21vZGlmaWVycycsIFsnYWN0aW9uJywgW2Iuc3RyaW5nKCdib29tJyldXV0sXG4gICAgICAgIFsnYm9keScsIGIudGV4dCgnU29tZSBjb250ZW50JyldXG4gICAgICApLFxuICAgIF0pXG4gICk7XG59KTtcblxudGVzdCgnVG9rZW5pemVyOiBNdXN0YWNoZVN0YXRlbWVudCBlbmNvdW50ZXJlZCBpbiBiZWZvcmVBdHRyaWJ1dGVOYW1lIHN0YXRlJywgZnVuY3Rpb24oKSB7XG4gIGxldCB0ID0gJzxpbnB1dCB7e2Jhcn19Pic7XG4gIGFzdEVxdWFsKHQsIGIucHJvZ3JhbShbYi5lbGVtZW50KCdpbnB1dCcsIFsnbW9kaWZpZXJzJywgJ2JhciddKV0pKTtcbn0pO1xuXG50ZXN0KCdUb2tlbml6ZXI6IE11c3RhY2hlU3RhdGVtZW50IGVuY291bnRlcmVkIGluIGF0dHJpYnV0ZU5hbWUgc3RhdGUnLCBmdW5jdGlvbigpIHtcbiAgbGV0IHQgPSAnPGlucHV0IGZvb3t7YmFyfX0+JztcbiAgYXN0RXF1YWwodCwgYi5wcm9ncmFtKFtiLmVsZW1lbnQoJ2lucHV0JywgWydhdHRycycsIFsnZm9vJywgJyddXSwgWydtb2RpZmllcnMnLCBbJ2JhciddXSldKSk7XG59KTtcblxudGVzdCgnVG9rZW5pemVyOiBNdXN0YWNoZVN0YXRlbWVudCBlbmNvdW50ZXJlZCBpbiBhZnRlckF0dHJpYnV0ZU5hbWUgc3RhdGUnLCBmdW5jdGlvbigpIHtcbiAgbGV0IHQgPSAnPGlucHV0IGZvbyB7e2Jhcn19Pic7XG4gIGFzdEVxdWFsKHQsIGIucHJvZ3JhbShbYi5lbGVtZW50KCdpbnB1dCcsIFsnYXR0cnMnLCBbJ2ZvbycsICcnXV0sIFsnbW9kaWZpZXJzJywgJ2JhciddKV0pKTtcbn0pO1xuXG50ZXN0KCdUb2tlbml6ZXI6IE11c3RhY2hlU3RhdGVtZW50IGVuY291bnRlcmVkIGluIGFmdGVyQXR0cmlidXRlVmFsdWUgc3RhdGUnLCBmdW5jdGlvbigpIHtcbiAgbGV0IHQgPSAnPGlucHV0IGZvbz0xIHt7YmFyfX0+JztcbiAgYXN0RXF1YWwodCwgYi5wcm9ncmFtKFtiLmVsZW1lbnQoJ2lucHV0JywgWydhdHRycycsIFsnZm9vJywgJzEnXV0sIFsnbW9kaWZpZXJzJywgWydiYXInXV0pXSkpO1xufSk7XG5cbnRlc3QoJ1Rva2VuaXplcjogTXVzdGFjaGVTdGF0ZW1lbnQgZW5jb3VudGVyZWQgaW4gYWZ0ZXJBdHRyaWJ1dGVWYWx1ZVF1b3RlZCBzdGF0ZScsIGZ1bmN0aW9uKCkge1xuICBsZXQgdCA9IFwiPGlucHV0IGZvbz0nMSd7e2Jhcn19PlwiO1xuICBhc3RFcXVhbCh0LCBiLnByb2dyYW0oW2IuZWxlbWVudCgnaW5wdXQnLCBbJ2F0dHJzJywgWydmb28nLCAnMSddXSwgWydtb2RpZmllcnMnLCAnYmFyJ10pXSkpO1xufSk7XG5cbnRlc3QoJ1N0cmlwcGluZyAtIG11c3RhY2hlcycsIGZ1bmN0aW9uKCkge1xuICBsZXQgdCA9ICdmb28ge3t+Y29udGVudH19IGJhcic7XG4gIGFzdEVxdWFsKFxuICAgIHQsXG4gICAgYi5wcm9ncmFtKFtcbiAgICAgIGIudGV4dCgnZm9vJyksXG4gICAgICBiLm11c3RhY2hlKGIucGF0aCgnY29udGVudCcpLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHtcbiAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgY2xvc2U6IGZhbHNlLFxuICAgICAgfSksXG4gICAgICBiLnRleHQoJyBiYXInKSxcbiAgICBdKVxuICApO1xuXG4gIHQgPSAnZm9vIHt7Y29udGVudH59fSBiYXInO1xuICBhc3RFcXVhbChcbiAgICB0LFxuICAgIGIucHJvZ3JhbShbXG4gICAgICBiLnRleHQoJ2ZvbyAnKSxcbiAgICAgIGIubXVzdGFjaGUoYi5wYXRoKCdjb250ZW50JyksIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwge1xuICAgICAgICBvcGVuOiBmYWxzZSxcbiAgICAgICAgY2xvc2U6IHRydWUsXG4gICAgICB9KSxcbiAgICAgIGIudGV4dCgnYmFyJyksXG4gICAgXSlcbiAgKTtcbn0pO1xuXG50ZXN0KCdTdHJpcHBpbmcgLSBibG9ja3MnLCBmdW5jdGlvbigpIHtcbiAgbGV0IHQgPSAnZm9vIHt7fiN3YXR9fXt7L3dhdH19IGJhcic7XG4gIGFzdEVxdWFsKFxuICAgIHQsXG4gICAgYi5wcm9ncmFtKFtcbiAgICAgIGIudGV4dCgnZm9vJyksXG4gICAgICBiLmJsb2NrKGIucGF0aCgnd2F0JyksIFtdLCBiLmhhc2goKSwgYi5ibG9ja0l0c2VsZigpLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwge1xuICAgICAgICBvcGVuOiB0cnVlLFxuICAgICAgICBjbG9zZTogZmFsc2UsXG4gICAgICB9KSxcbiAgICAgIGIudGV4dCgnIGJhcicpLFxuICAgIF0pXG4gICk7XG5cbiAgdCA9ICdmb28ge3sjd2F0fX17ey93YXR+fX0gYmFyJztcbiAgYXN0RXF1YWwoXG4gICAgdCxcbiAgICBiLnByb2dyYW0oW1xuICAgICAgYi50ZXh0KCdmb28gJyksXG4gICAgICBiLmJsb2NrKFxuICAgICAgICBiLnBhdGgoJ3dhdCcpLFxuICAgICAgICBbXSxcbiAgICAgICAgYi5oYXNoKCksXG4gICAgICAgIGIuYmxvY2tJdHNlbGYoKSxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICB7IG9wZW46IGZhbHNlLCBjbG9zZTogdHJ1ZSB9XG4gICAgICApLFxuICAgICAgYi50ZXh0KCdiYXInKSxcbiAgICBdKVxuICApO1xufSk7XG5cbnRlc3QoJ1N0cmlwcGluZyAtIHByb2dyYW1zJywgZnVuY3Rpb24oKSB7XG4gIGxldCB0ID0gJ3t7I3dhdH59fSBmb28ge3tlbHNlfX17ey93YXR9fSc7XG4gIGFzdEVxdWFsKFxuICAgIHQsXG4gICAgYi5wcm9ncmFtKFtcbiAgICAgIGIuYmxvY2soXG4gICAgICAgIGIucGF0aCgnd2F0JyksXG4gICAgICAgIFtdLFxuICAgICAgICBiLmhhc2goKSxcbiAgICAgICAgYi5ibG9ja0l0c2VsZihbYi50ZXh0KCdmb28gJyldKSxcbiAgICAgICAgYi5ibG9ja0l0c2VsZigpLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHsgb3BlbjogZmFsc2UsIGNsb3NlOiB0cnVlIH1cbiAgICAgICksXG4gICAgXSlcbiAgKTtcblxuICB0ID0gJ3t7I3dhdH19IGZvbyB7e35lbHNlfX17ey93YXR9fSc7XG4gIGFzdEVxdWFsKFxuICAgIHQsXG4gICAgYi5wcm9ncmFtKFtcbiAgICAgIGIuYmxvY2soXG4gICAgICAgIGIucGF0aCgnd2F0JyksXG4gICAgICAgIFtdLFxuICAgICAgICBiLmhhc2goKSxcbiAgICAgICAgYi5ibG9ja0l0c2VsZihbYi50ZXh0KCcgZm9vJyldKSxcbiAgICAgICAgYi5ibG9ja0l0c2VsZigpLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgeyBvcGVuOiB0cnVlLCBjbG9zZTogZmFsc2UgfVxuICAgICAgKSxcbiAgICBdKVxuICApO1xuXG4gIHQgPSAne3sjd2F0fX17e2Vsc2V+fX0gZm9vIHt7L3dhdH19JztcbiAgYXN0RXF1YWwoXG4gICAgdCxcbiAgICBiLnByb2dyYW0oW1xuICAgICAgYi5ibG9jayhcbiAgICAgICAgYi5wYXRoKCd3YXQnKSxcbiAgICAgICAgW10sXG4gICAgICAgIGIuaGFzaCgpLFxuICAgICAgICBiLmJsb2NrSXRzZWxmKCksXG4gICAgICAgIGIuYmxvY2tJdHNlbGYoW2IudGV4dCgnZm9vICcpXSksXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICB7IG9wZW46IGZhbHNlLCBjbG9zZTogdHJ1ZSB9XG4gICAgICApLFxuICAgIF0pXG4gICk7XG5cbiAgdCA9ICd7eyN3YXR9fXt7ZWxzZX19IGZvbyB7e34vd2F0fX0nO1xuICBhc3RFcXVhbChcbiAgICB0LFxuICAgIGIucHJvZ3JhbShbXG4gICAgICBiLmJsb2NrKFxuICAgICAgICBiLnBhdGgoJ3dhdCcpLFxuICAgICAgICBbXSxcbiAgICAgICAgYi5oYXNoKCksXG4gICAgICAgIGIuYmxvY2tJdHNlbGYoKSxcbiAgICAgICAgYi5ibG9ja0l0c2VsZihbYi50ZXh0KCcgZm9vJyldKSxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgeyBvcGVuOiB0cnVlLCBjbG9zZTogZmFsc2UgfVxuICAgICAgKSxcbiAgICBdKVxuICApO1xufSk7XG5cbnRlc3QoJ1N0cmlwcGluZyAtIHJlbW92ZXMgdW5uZWNlc3NhcnkgdGV4dCBub2RlcycsIGZ1bmN0aW9uKCkge1xuICBsZXQgdCA9ICd7eyNlYWNofn19XFxuICA8bGk+IGZvbyA8L2xpPlxcbnt7fi9lYWNofX0nO1xuXG4gIGFzdEVxdWFsKFxuICAgIHQsXG4gICAgYi5wcm9ncmFtKFtcbiAgICAgIGIuYmxvY2soXG4gICAgICAgIGIucGF0aCgnZWFjaCcpLFxuICAgICAgICBbXSxcbiAgICAgICAgYi5oYXNoKCksXG4gICAgICAgIGIuYmxvY2tJdHNlbGYoW2IuZWxlbWVudCgnbGknLCBbJ2JvZHknLCBiLnRleHQoJyBmb28gJyldKV0pLFxuICAgICAgICBudWxsLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHsgb3BlbjogZmFsc2UsIGNsb3NlOiB0cnVlIH0sXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgeyBvcGVuOiB0cnVlLCBjbG9zZTogZmFsc2UgfVxuICAgICAgKSxcbiAgICBdKVxuICApO1xufSk7XG5cbnRlc3QoJ1doaXRlc3BhY2UgY29udHJvbCAtIGxpbmVicmVha3MgYWZ0ZXIgYmxvY2tzIHJlbW92ZWQgYnkgZGVmYXVsdCcsIGZ1bmN0aW9uKCkge1xuICBsZXQgdCA9ICd7eyNlYWNofX1cXG4gIDxsaT4gZm9vIDwvbGk+XFxue3svZWFjaH19JztcblxuICBhc3RFcXVhbChcbiAgICB0LFxuICAgIGIucHJvZ3JhbShbXG4gICAgICBiLmJsb2NrKFxuICAgICAgICBiLnBhdGgoJ2VhY2gnKSxcbiAgICAgICAgW10sXG4gICAgICAgIGIuaGFzaCgpLFxuICAgICAgICBiLmJsb2NrSXRzZWxmKFtiLnRleHQoJyAgJyksIGIuZWxlbWVudCgnbGknLCBbJ2JvZHknLCBiLnRleHQoJyBmb28gJyldKSwgYi50ZXh0KCdcXG4nKV0pLFxuICAgICAgICBudWxsXG4gICAgICApLFxuICAgIF0pXG4gICk7XG59KTtcblxudGVzdCgnV2hpdGVzcGFjZSBjb250cm9sIC0gcHJlc2VydmUgYWxsIHdoaXRlc3BhY2UgaWYgY29uZmlnIGlzIHNldCcsIGZ1bmN0aW9uKCkge1xuICBsZXQgdCA9ICd7eyNlYWNofX1cXG4gIDxsaT4gZm9vIDwvbGk+XFxue3svZWFjaH19JztcblxuICBhc3RFcXVhbChcbiAgICB0LFxuICAgIGIucHJvZ3JhbShbXG4gICAgICBiLmJsb2NrKFxuICAgICAgICBiLnBhdGgoJ2VhY2gnKSxcbiAgICAgICAgW10sXG4gICAgICAgIGIuaGFzaCgpLFxuICAgICAgICBiLmJsb2NrSXRzZWxmKFtiLnRleHQoJ1xcbiAgJyksIGIuZWxlbWVudCgnbGknLCBbJ2JvZHknLCBiLnRleHQoJyBmb28gJyldKSwgYi50ZXh0KCdcXG4nKV0pLFxuICAgICAgICBudWxsXG4gICAgICApLFxuICAgIF0pLFxuICAgIHVuZGVmaW5lZCxcbiAgICB7XG4gICAgICBwYXJzZU9wdGlvbnM6IHsgaWdub3JlU3RhbmRhbG9uZTogdHJ1ZSB9LFxuICAgIH1cbiAgKTtcbn0pO1xuXG4vLyBUT0RPOiBNYWtlIHRoZXNlIHRocm93IGFuIGVycm9yLlxuLy90ZXN0KFwiQXdrd2FyZCBtdXN0YWNoZSBpbiB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWVcIiwgZnVuY3Rpb24oKSB7XG4vLyAgbGV0IHQgPSBcIjxkaXYgY2xhc3M9YXt7Zm9vfX0+PC9kaXY+XCI7XG4vLyAgYXN0RXF1YWwodCwgYi5wcm9ncmFtKFtcbi8vICAgIGIuZWxlbWVudCgnZGl2JywgWyBiLmF0dHIoJ2NsYXNzJywgY29uY2F0KFtiLnN0cmluZyhcImFcIiksIGIuc2V4cHIoW2IucGF0aCgnZm9vJyldKV0pKSBdKVxuLy8gIF0pKTtcbi8vXG4vLyAgdCA9IFwiPGRpdiBjbGFzcz1he3tmb299fWI+PC9kaXY+XCI7XG4vLyAgYXN0RXF1YWwodCwgYi5wcm9ncmFtKFtcbi8vICAgIGIuZWxlbWVudCgnZGl2JywgWyBiLmF0dHIoJ2NsYXNzJywgY29uY2F0KFtiLnN0cmluZyhcImFcIiksIGIuc2V4cHIoW2IucGF0aCgnZm9vJyldKSwgYi5zdHJpbmcoXCJiXCIpXSkpIF0pXG4vLyAgXSkpO1xuLy9cbi8vICB0ID0gXCI8ZGl2IGNsYXNzPXt7Zm9vfX1iPjwvZGl2PlwiO1xuLy8gIGFzdEVxdWFsKHQsIGIucHJvZ3JhbShbXG4vLyAgICBiLmVsZW1lbnQoJ2RpdicsIFsgYi5hdHRyKCdjbGFzcycsIGNvbmNhdChbYi5zZXhwcihbYi5wYXRoKCdmb28nKV0pLCBiLnN0cmluZyhcImJcIildKSkgXSlcbi8vICBdKSk7XG4vL30pO1xuXG50ZXN0KCdhbiBIVE1MIGNvbW1lbnQnLCBmdW5jdGlvbigpIHtcbiAgbGV0IHQgPSAnYmVmb3JlIDwhLS0gc29tZSBjb21tZW50IC0tPiBhZnRlcic7XG4gIGFzdEVxdWFsKHQsIGIucHJvZ3JhbShbYi50ZXh0KCdiZWZvcmUgJyksIGIuY29tbWVudCgnIHNvbWUgY29tbWVudCAnKSwgYi50ZXh0KCcgYWZ0ZXInKV0pKTtcbn0pO1xuXG50ZXN0KCdhIEhhbmRsZWJhcnMgY29tbWVudCBpbnNpZGUgYW4gSFRNTCBjb21tZW50JywgZnVuY3Rpb24oKSB7XG4gIGxldCB0ID0gJ2JlZm9yZSA8IS0tIHNvbWUge3shIG5lc3RlZCB0aGluZyB9fSBjb21tZW50IC0tPiBhZnRlcic7XG4gIGFzdEVxdWFsKFxuICAgIHQsXG4gICAgYi5wcm9ncmFtKFtcbiAgICAgIGIudGV4dCgnYmVmb3JlICcpLFxuICAgICAgYi5jb21tZW50KCcgc29tZSB7eyEgbmVzdGVkIHRoaW5nIH19IGNvbW1lbnQgJyksXG4gICAgICBiLnRleHQoJyBhZnRlcicpLFxuICAgIF0pXG4gICk7XG59KTtcblxudGVzdCgnYSBIYW5kbGViYXJzIGNvbW1lbnQnLCBmdW5jdGlvbigpIHtcbiAgbGV0IHQgPSAnYmVmb3JlIHt7ISBzb21lIGNvbW1lbnQgfX0gYWZ0ZXInO1xuICBhc3RFcXVhbChcbiAgICB0LFxuICAgIGIucHJvZ3JhbShbYi50ZXh0KCdiZWZvcmUgJyksIGIubXVzdGFjaGVDb21tZW50KCcgc29tZSBjb21tZW50ICcpLCBiLnRleHQoJyBhZnRlcicpXSlcbiAgKTtcbn0pO1xuXG50ZXN0KCdhIEhhbmRsZWJhcnMgY29tbWVudCBpbiBwcm9wZXIgZWxlbWVudCBzcGFjZScsIGZ1bmN0aW9uKCkge1xuICBsZXQgdCA9ICdiZWZvcmUgPGRpdiB7eyEgc29tZSBjb21tZW50IH19IGRhdGEtZm9vPVwiYmFyXCIge3shIG90aGVyIGNvbW1lbnQgfX0+PC9kaXY+IGFmdGVyJztcbiAgYXN0RXF1YWwoXG4gICAgdCxcbiAgICBiLnByb2dyYW0oW1xuICAgICAgYi50ZXh0KCdiZWZvcmUgJyksXG4gICAgICBiLmVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICBbJ2F0dHJzJywgWydkYXRhLWZvbycsIGIudGV4dCgnYmFyJyldXSxcbiAgICAgICAgWydjb21tZW50cycsIGIubXVzdGFjaGVDb21tZW50KCcgc29tZSBjb21tZW50ICcpLCBiLm11c3RhY2hlQ29tbWVudCgnIG90aGVyIGNvbW1lbnQgJyldXG4gICAgICApLFxuICAgICAgYi50ZXh0KCcgYWZ0ZXInKSxcbiAgICBdKVxuICApO1xufSk7XG5cbnRlc3QoJ2EgSGFuZGxlYmFycyBjb21tZW50IGluIGludmFsaWQgZWxlbWVudCBzcGFjZScsIGZ1bmN0aW9uKGFzc2VydCkge1xuICBhc3NlcnQudGhyb3dzKCgpID0+IHtcbiAgICBwYXJzZSgnXFxuYmVmb3JlIDxkaXYgXFxuICBhe3shIHNvbWUgY29tbWVudCB9fSBkYXRhLWZvbz1cImJhclwiPjwvZGl2PiBhZnRlcicpO1xuICB9LCAvVXNpbmcgYSBIYW5kbGViYXJzIGNvbW1lbnQgd2hlbiBpbiB0aGUgYGF0dHJpYnV0ZU5hbWVgIHN0YXRlIGlzIG5vdCBzdXBwb3J0ZWQ6IFwiIHNvbWUgY29tbWVudCBcIiBvbiBsaW5lIDM6My8pO1xuXG4gIGFzc2VydC50aHJvd3MoKCkgPT4ge1xuICAgIHBhcnNlKCdcXG5iZWZvcmUgPGRpdiBcXG4gIGE9e3shIHNvbWUgY29tbWVudCB9fSBkYXRhLWZvbz1cImJhclwiPjwvZGl2PiBhZnRlcicpO1xuICB9LCAvVXNpbmcgYSBIYW5kbGViYXJzIGNvbW1lbnQgd2hlbiBpbiB0aGUgYGJlZm9yZUF0dHJpYnV0ZVZhbHVlYCBzdGF0ZSBpcyBub3Qgc3VwcG9ydGVkOiBcIiBzb21lIGNvbW1lbnQgXCIgb24gbGluZSAzOjQvKTtcblxuICBhc3NlcnQudGhyb3dzKCgpID0+IHtcbiAgICBwYXJzZSgnXFxuYmVmb3JlIDxkaXYgXFxuICBhPVwie3shIHNvbWUgY29tbWVudCB9fVwiIGRhdGEtZm9vPVwiYmFyXCI+PC9kaXY+IGFmdGVyJyk7XG4gIH0sIC9Vc2luZyBhIEhhbmRsZWJhcnMgY29tbWVudCB3aGVuIGluIHRoZSBgYXR0cmlidXRlVmFsdWVEb3VibGVRdW90ZWRgIHN0YXRlIGlzIG5vdCBzdXBwb3J0ZWQ6IFwiIHNvbWUgY29tbWVudCBcIiBvbiBsaW5lIDM6NS8pO1xufSk7XG5cbnRlc3QoJ2FsbG93IHt7bnVsbH19IHRvIGJlIHBhc3NlZCBhcyBoZWxwZXIgbmFtZScsIGZ1bmN0aW9uKCkge1xuICBsZXQgYXN0ID0gcGFyc2UoJ3t7bnVsbH19Jyk7XG5cbiAgYXN0RXF1YWwoYXN0LCBiLnByb2dyYW0oW2IubXVzdGFjaGUoYi5udWxsKCkpXSkpO1xufSk7XG5cbnRlc3QoJ2FsbG93IHt7bnVsbH19IHRvIGJlIHBhc3NlZCBhcyBhIHBhcmFtJywgZnVuY3Rpb24oKSB7XG4gIGxldCBhc3QgPSBwYXJzZSgne3tmb28gbnVsbH19Jyk7XG5cbiAgYXN0RXF1YWwoYXN0LCBiLnByb2dyYW0oW2IubXVzdGFjaGUoYi5wYXRoKCdmb28nKSwgW2IubnVsbCgpXSldKSk7XG59KTtcblxudGVzdCgnYWxsb3cge3t1bmRlZmluZWR9fSB0byBiZSBwYXNzZWQgYXMgaGVscGVyIG5hbWUnLCBmdW5jdGlvbigpIHtcbiAgbGV0IGFzdCA9IHBhcnNlKCd7e3VuZGVmaW5lZH19Jyk7XG5cbiAgYXN0RXF1YWwoYXN0LCBiLnByb2dyYW0oW2IubXVzdGFjaGUoYi51bmRlZmluZWQoKSldKSk7XG59KTtcblxudGVzdCgnYWxsb3cge3t1bmRlZmluZWR9fSB0byBiZSBwYXNzZWQgYXMgYSBwYXJhbScsIGZ1bmN0aW9uKCkge1xuICBsZXQgYXN0ID0gcGFyc2UoJ3t7Zm9vIHVuZGVmaW5lZH19Jyk7XG5cbiAgYXN0RXF1YWwoYXN0LCBiLnByb2dyYW0oW2IubXVzdGFjaGUoYi5wYXRoKCdmb28nKSwgW2IudW5kZWZpbmVkKCldKV0pKTtcbn0pO1xuXG50ZXN0KCdIYW5kbGViYXJzIHBhcnRpYWwgc2hvdWxkIGVycm9yJywgZnVuY3Rpb24oYXNzZXJ0KSB7XG4gIGFzc2VydC50aHJvd3MoKCkgPT4ge1xuICAgIHBhcnNlKCd7ez4gZm9vfX0nKTtcbiAgfSwgRXJyb3IoYEhhbmRsZWJhcnMgcGFydGlhbHMgYXJlIG5vdCBzdXBwb3J0ZWQ6IFwie3s+IGZvb1wiIGF0IEwxOkMwYCkpO1xufSk7XG5cbnRlc3QoJ0hhbmRsZWJhcnMgcGFydGlhbCBibG9jayBzaG91bGQgZXJyb3InLCBmdW5jdGlvbihhc3NlcnQpIHtcbiAgYXNzZXJ0LnRocm93cygoKSA9PiB7XG4gICAgcGFyc2UoJ3t7Iz4gZm9vfX17ey9mb299fScpO1xuICB9LCBuZXcgRXJyb3IoYEhhbmRsZWJhcnMgcGFydGlhbCBibG9ja3MgYXJlIG5vdCBzdXBwb3J0ZWQ6IFwie3sjPiBmb29cIiBhdCBMMTpDMGApKTtcbn0pO1xuXG50ZXN0KCdIYW5kbGViYXJzIGRlY29yYXRvciBzaG91bGQgZXJyb3InLCBmdW5jdGlvbihhc3NlcnQpIHtcbiAgYXNzZXJ0LnRocm93cygoKSA9PiB7XG4gICAgcGFyc2UoJ3t7KiBmb299fScpO1xuICB9LCBuZXcgRXJyb3IoYEhhbmRsZWJhcnMgZGVjb3JhdG9ycyBhcmUgbm90IHN1cHBvcnRlZDogXCJ7eyogZm9vXCIgYXQgTDE6QzBgKSk7XG59KTtcblxudGVzdCgnSGFuZGxlYmFycyBkZWNvcmF0b3IgYmxvY2sgc2hvdWxkIGVycm9yJywgZnVuY3Rpb24oYXNzZXJ0KSB7XG4gIGFzc2VydC50aHJvd3MoKCkgPT4ge1xuICAgIHBhcnNlKCd7eyMqIGZvb319e3svZm9vfX0nKTtcbiAgfSwgbmV3IEVycm9yKGBIYW5kbGViYXJzIGRlY29yYXRvciBibG9ja3MgYXJlIG5vdCBzdXBwb3J0ZWQ6IFwie3sjKiBmb29cIiBhdCBMMTpDMGApKTtcbn0pO1xuXG50ZXN0KCdkaXNhbGxvd2VkIG11c3RhY2hlcyBpbiB0aGUgdGFnTmFtZSBzcGFjZScsIGZ1bmN0aW9uKGFzc2VydCkge1xuICBhc3NlcnQudGhyb3dzKCgpID0+IHtcbiAgICBwYXJzZSgnPHt7XCJhc2RmXCJ9fT48L3t7XCJhc2RmXCJ9fT4nKTtcbiAgfSwgL0Nhbm5vdCB1c2UgbXVzdGFjaGVzIGluIGFuIGVsZW1lbnRzIHRhZ25hbWU6IGB7e1wiYXNkZlwiYCBhdCBMMTpDMS8pO1xuXG4gIGFzc2VydC50aHJvd3MoKCkgPT4ge1xuICAgIHBhcnNlKCc8aW5wdXR7e2Jhcn19PicpO1xuICB9LCAvQ2Fubm90IHVzZSBtdXN0YWNoZXMgaW4gYW4gZWxlbWVudHMgdGFnbmFtZTogYHt7YmFyYCBhdCBMMTpDNi8pO1xufSk7XG5cbnRlc3QoJ211c3RhY2hlIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IHNlbGYgY2xvc2luZyB0YWcgZG9lcyBub3QgZXJyb3InLCBmdW5jdGlvbigpIHtcbiAgbGV0IGFzdCA9IHBhcnNlKCc8Rm9vQmFyIGRhdGEtZm9vPXt7YmxhaH19Lz4nKTtcbiAgbGV0IGVsZW1lbnQgPSBiLmVsZW1lbnQoJ0Zvb0Jhci8nLCBbJ2F0dHJzJywgWydkYXRhLWZvbycsIGIubXVzdGFjaGUoJ2JsYWgnKV1dKTtcbiAgYXN0RXF1YWwoYXN0LCBiLnByb2dyYW0oW2VsZW1lbnRdKSk7XG59KTtcblxuUVVuaXQuZHVtcC5tYXhEZXB0aCA9IDEwMDtcblxudGVzdCgnbmFtZWQgYmxvY2tzJywgKCkgPT4ge1xuICBsZXQgYXN0ID0gcGFyc2Uoc3RyaXBgXG4gICAgPFRhYj5cbiAgICAgIDw6aGVhZGVyPlxuICAgICAgICBJdCdzIGEgaGVhZGVyIVxuICAgICAgPC86aGVhZGVyPlxuXG4gICAgICA8OmJvZHkgYXMgfGNvbnRlbnRzfD5cbiAgICAgICAgPGRpdj57e2NvbnRlbnRzfX08L2Rpdj5cbiAgICAgIDwvOmJvZHk+XG4gICAgPC9UYWI+XG4gIGApO1xuXG4gIGxldCBlbGVtZW50ID0gYi5lbGVtZW50KCdUYWInLCBbXG4gICAgJ2JvZHknLFxuICAgIGIuZWxlbWVudCgnOmhlYWRlcicsIFsnYm9keScsIGIudGV4dChgSXQncyBhIGhlYWRlciFgKV0pLFxuICAgIGIuZWxlbWVudChcbiAgICAgICc6Ym9keScsXG4gICAgICBbJ2JvZHknLCBiLmVsZW1lbnQoJ2RpdicsIFsnYm9keScsIGIubXVzdGFjaGUoJ2NvbnRlbnRzJyldKV0sXG4gICAgICBbJ2FzJywgJ2NvbnRlbnRzJ11cbiAgICApLFxuICBdKTtcbiAgYXN0RXF1YWwoYXN0LCBiLnByb2dyYW0oW2VsZW1lbnRdKSk7XG59KTtcblxudGVzdCgncGF0aCBleHByZXNzaW9uIHdpdGggXCJkYW5nbGluZyBkb3RcIiB0aHJvd3MgZXJyb3InLCBmdW5jdGlvbihhc3NlcnQpIHtcbiAgYXNzZXJ0LnRocm93cygoKSA9PiB7XG4gICAgcGFyc2UoJ3t7aWYgZm9vLiBiYXIgYmF6fX0nKTtcbiAgfSwgLydcXC4nIGlzIG5vdCBhIHN1cHBvcnRlZCBwYXRoIGluIEdsaW1tZXI7IGNoZWNrIGZvciBhIHBhdGggd2l0aCBhIHRyYWlsaW5nICdcXC4nIGF0IEwxOkM4Lyk7XG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwKHN0cmluZ3M6IFRlbXBsYXRlU3RyaW5nc0FycmF5LCAuLi5hcmdzOiBzdHJpbmdbXSkge1xuICByZXR1cm4gc3RyaW5nc1xuICAgIC5tYXAoKHN0cjogc3RyaW5nLCBpOiBudW1iZXIpID0+IHtcbiAgICAgIHJldHVybiBgJHtzdHJcbiAgICAgICAgLnNwbGl0KCdcXG4nKVxuICAgICAgICAubWFwKHMgPT4gcy50cmltKCkpXG4gICAgICAgIC5qb2luKCcnKX0ke2FyZ3NbaV0gPyBhcmdzW2ldIDogJyd9YDtcbiAgICB9KVxuICAgIC5qb2luKCcnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=