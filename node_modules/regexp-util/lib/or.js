"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var base_1 = require("./base");
var charset_1 = require("./charset");
var util_1 = require("./util");
var Or = /** @class */ (function (_super) {
    tslib_1.__extends(Or, _super);
    function Or() {
        var inputs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            inputs[_i] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        var strings = [];
        var charset_inputs = [];
        for (var _a = 0, inputs_1 = inputs; _a < inputs_1.length; _a++) {
            var input = inputs_1[_a];
            if (input instanceof Or) {
                strings.push.apply(strings, input.strings);
                charset_inputs.push(input.charset);
            }
            else if (typeof input !== 'string' ||
                (input.length === 1 && !is_special_char(input))) {
                charset_inputs.push(input);
            }
            else {
                strings.push(input);
            }
        }
        _this.strings = Object.keys(dictionaryify(strings));
        _this.charset = new (charset_1.Charset.bind.apply(charset_1.Charset, [void 0].concat(charset_inputs)))();
        return _this;
    }
    Or.prototype.union = function () {
        var inputs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            inputs[_i] = arguments[_i];
        }
        return new (Or.bind.apply(Or, [void 0, this.charset].concat(this.strings, inputs)))();
    };
    Or.prototype.subtract = function () {
        var inputs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            inputs[_i] = arguments[_i];
        }
        var string_dictionay = dictionaryify(this.strings);
        var charset = new (charset_1.Charset.bind.apply(charset_1.Charset, [void 0].concat(this.charset.data)))();
        var charset_inputs = [];
        for (var _a = 0, inputs_2 = inputs; _a < inputs_2.length; _a++) {
            var input = inputs_2[_a];
            if (input instanceof Or) {
                for (var _b = 0, _c = input.strings; _b < _c.length; _b++) {
                    var str = _c[_b];
                    delete string_dictionay[str];
                }
                charset_inputs.push(input.charset);
            }
            else if (typeof input !== 'string' ||
                (input.length === 1 && !is_special_char(input))) {
                charset_inputs.push(input);
            }
            else {
                delete string_dictionay[input];
            }
        }
        return new (Or.bind.apply(Or, [void 0, charset.subtract.apply(charset, charset_inputs)].concat(Object.keys(string_dictionay))))();
    };
    Or.prototype._is_empty = function () {
        return this.charset.isEmpty() && this.strings.length === 0;
    };
    Or.prototype._to_string = function () {
        var parts = [];
        if (this.charset.data.length !== 0) {
            parts.push(this.charset.toString());
        }
        if (this.strings.length !== 0) {
            parts.push.apply(parts, this.strings);
        }
        return util_1.wrap(parts.join('|'));
    };
    return Or;
}(base_1.Base));
exports.Or = Or;
exports.or = function () {
    var inputs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        inputs[_i] = arguments[_i];
    }
    return new (Or.bind.apply(Or, [void 0].concat(inputs)))();
};
function is_special_char(char) {
    switch (char) {
        case '^':
        case '$':
            return true;
        default:
            return false;
    }
}
function dictionaryify(array) {
    var dictionary = {};
    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
        var value = array_1[_i];
        dictionary[value] = true;
    }
    return dictionary;
}
